#LyX 2.3 created this file. For more info see http://www.lyx.org/
\lyxformat 544
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass article
\begin_preamble
% Common settings
\input{/Users/lutz/Documents/data/software/lyx/paper_preamble.tex}

% \usepackage{refstyle}
\end_preamble
\use_default_options false
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman "ae" "default"
\font_sans "lmss" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\use_microtype false
\use_dash_ligatures true
\graphics pdftex
\default_output_format pdf2
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize 12
\spacing single
\use_hyperref true
\pdf_bookmarks true
\pdf_bookmarksnumbered false
\pdf_bookmarksopen false
\pdf_bookmarksopenlevel 1
\pdf_breaklinks false
\pdf_pdfborder false
\pdf_colorlinks true
\pdf_backref false
\pdf_pdfusetitle true
\papersize letterpaper
\use_geometry false
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 0
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 0
\use_package mhchem 1
\use_package stackrel 0
\use_package stmaryrd 0
\use_package undertilde 0
\cite_engine natbib
\cite_engine_type authoryear
\biblio_style plainnat
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 0
\use_minted 0
\index Index
\shortcut idx
\color #008000
\end_index
\leftmargin 2cm
\topmargin 3cm
\rightmargin 2cm
\bottommargin 3cm
\secnumdepth 3
\tocdepth 3
\paragraph_separation skip
\defskip smallskip
\is_math_indent 0
\math_numbering_side default
\quotes_style english
\dynamic_quotes 0
\papercolumns 1
\papersides 1
\paperpagestyle default
\listings_params "keywordstyle={\color{blue}},frame={tb},framesep={6pt}"
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
Notes on the Julia Programming Language
\end_layout

\begin_layout Author
Lutz Hendricks
\begin_inset Newline newline
\end_inset


\size small
UNC Chapel Hill
\end_layout

\begin_layout Date

\size small
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
today
\end_layout

\end_inset


\end_layout

\begin_layout Abstract
This document summarizes my experience with the Julia language.
 Its main purpose is to document tips and tricks that are not covered in
 the official documentation.
\end_layout

\begin_layout Section
My Setup (1.2)
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
Each section is labeled with the Julia version for which it was last updated.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
My current setup is Julia 1.3 run from the terminal and Visual Studio Code
 as editor (augmented with BBEdit to overcome VsCode's shortcomings in multi-fil
e search and replace).
\end_layout

\begin_layout Standard
Running the 
\family typewriter
Julia
\family default
 apps seems identical to running 
\family typewriter
Julia
\family default
 from the terminal.
\end_layout

\begin_layout Standard
My startup file loads the packages 
\family typewriter
OhMyREPL
\family default
 and 
\family typewriter
Revise
\family default
.
 
\family typewriter
Revise
\family default
 comes after packages from the standard libraries, so it does not track
 changes to those.
\end_layout

\begin_layout Standard
It appears that the default editor is determined by the system wide file
 association.
 No need to set the 
\family typewriter
JULIA_EDITOR
\family default
 environment variable.
\end_layout

\begin_layout Standard
One drawback: Links in the terminal REPL are not clickable (update: they
 are when using VsCode).
 A substantial drawback during debugging.
 So I end up using BBEdit as my main editor, but do some debugging in 
\family typewriter
Juno
\family default
.
 Not ideal.
\end_layout

\begin_layout Subsection
Updating to a new version (1.2)
\end_layout

\begin_layout Standard
After starting the new version, basic packages need to be added so the startup
 code can be run (e.g., 
\family typewriter
OhMyREPL
\family default
).
\end_layout

\begin_layout Standard
The bash profile needs to be updated to point to the new version.
\end_layout

\begin_layout Standard
The 
\begin_inset CommandInset href
LatexCommand href
name "Jill bash script"
target "https://github.com/abelsiqueira/jill"
literal "false"

\end_inset

 automates this process.
\end_layout

\begin_layout Section
Arrays (1.1)
\end_layout

\begin_layout Subsection
Indexing
\end_layout

\begin_layout Standard
Extracting specific elements with indices given by vectors:
\end_layout

\begin_layout Verbatim
A = rand(4,3,5); 
\end_layout

\begin_layout Verbatim
A[CartesianIndex.([1,2], [2,2]), 1] -> A[1,2,1] and A[2,2,1]
\end_layout

\begin_layout Standard
Similar to using sub2ind:
\end_layout

\begin_layout Verbatim
idxV = sub2ind(size(A), [1,2],[2,2],[1,1])
\end_layout

\begin_layout Verbatim
A[idxV]
\end_layout

\begin_layout Standard
To extract a 
\begin_inset Quotes eld
\end_inset

row
\begin_inset Quotes erd
\end_inset

 of a multidimensional matrix without hard-coding the dimensions, generate
 a 
\family typewriter
view
\family default
 using 
\family typewriter
selectdim
\family default
.
\end_layout

\begin_layout Standard
To drop dimensions, use 
\family typewriter
dropdims
\family default
.
\end_layout

\begin_layout Section
Data Handling (1.1)
\end_layout

\begin_layout Standard

\family typewriter
DataFrames
\family default
 has the rough equivalent of Matlab 
\family typewriter
table
\family default
s.
 
\end_layout

\begin_layout Standard

\family typewriter
JuliaDB
\family default
 resembles the data handling capabilities of traditional stats packages
 (like STATA) where processing happens outside of RAM.
\end_layout

\begin_layout Subsection
Dataframes (1.1)
\end_layout

\begin_layout Standard
Tutorials are collected 
\begin_inset CommandInset href
LatexCommand href
name "here"
target "https://discourse.julialang.org/t/another-intro-to-dataframes-jl/28308"
literal "false"

\end_inset

.
\end_layout

\begin_layout Standard
Stats packages often provide data in 
\begin_inset Quotes eld
\end_inset

long
\begin_inset Quotes erd
\end_inset

 format (i.e., each id occupies many rows to cover many variables).
 
\begin_inset CommandInset href
LatexCommand href
name "unstack"
target "http://juliadata.github.io/DataFrames.jl/stable/man/reshaping_and_pivoting/"
literal "false"

\end_inset

 and 
\family typewriter
stack
\family default
 can go back and forth between 
\begin_inset Quotes eld
\end_inset

long
\begin_inset Quotes erd
\end_inset

 and 
\begin_inset Quotes eld
\end_inset

short
\begin_inset Quotes erd
\end_inset

 formats.
\end_layout

\begin_layout Subsection
STATA files (1.2)
\end_layout

\begin_layout Standard
Can be read using 
\begin_inset CommandInset href
LatexCommand href
name "StatFiles.jl"
target "https://github.com/queryverse/StatFiles.jl"
literal "false"

\end_inset

.
\end_layout

\begin_layout Section
Dates and Times (1.2)
\end_layout

\begin_layout Standard
Keeping track of elapsed time (e.g., since starting a computation):
\end_layout

\begin_layout Itemize
store the start time as a 
\family typewriter
DateTime
\family default
 : 
\family typewriter
startTime = Dates.now()
\end_layout

\begin_layout Itemize

\family typewriter
round(Dates.now() - startTime, Dates.Minute)
\family default
 gives the elapsed time in minutes.
\end_layout

\begin_layout Section
Debugging (1.3)
\end_layout

\begin_layout Standard

\family typewriter
ArgCheck.jl
\family default
 is useful for sprinkling more expressive 
\family typewriter
@assert
\family default
s around the code.
 As far as I can tell, the difference compared with 
\family typewriter
@assert
\family default
 is that 
\family typewriter
ArgCheck
\family default
 produces more informative errors.
 It shows the values of the expressions to be compared.
\end_layout

\begin_layout Standard

\family typewriter
Infiltrate.jl
\family default
 can set a breakpoint similar to 
\family typewriter
Matlab's keyboard
\family default
 statement.
 Very useful.
 But one cannot continue the run after a breakpoint.
\end_layout

\begin_layout Standard
The 
\family typewriter
Juno
\family default
 debugger stopped working in V.1.1 (invoking it hangs 
\family typewriter
Julia
\family default
).
 But the command line debugger may well be the better option.
\end_layout

\begin_layout Subsection
Debugger (1.2)
\end_layout

\begin_layout Standard
My favorite debugging option.
 
\end_layout

\begin_layout Standard
After 
\family typewriter
using Debugger
\family default
 invoke 
\family typewriter
@enter foo(x)
\family default
 to start a debugging session.
 
\end_layout

\begin_layout Standard
Particularly useful:
\end_layout

\begin_layout Itemize

\family typewriter
break_on(:error)
\end_layout

\begin_layout Itemize

\family typewriter
bp add func:line
\family default
 with possible restrictions on particular argument types.
\end_layout

\begin_layout Standard
Breakpoints, including the 
\family typewriter
@bp
\family default
 macro, do not work in my code (throws unparsable errors) but they work
 in simple examples.
\end_layout

\begin_layout Subsection
Rebugger
\end_layout

\begin_layout Standard
The MacOs keybinding for 
\family typewriter
interpret
\family default
 is 
\family typewriter
Fn-Esc-i
\family default
.
\end_layout

\begin_layout Section
Documentation (1.2)
\end_layout

\begin_layout Standard

\family typewriter
DocStringExtensions.jl
\family default
 makes it easier to write docs.
 In particular, function signatures are automatically created in docstrings.
\end_layout

\begin_layout Standard

\family typewriter
Documenter.jl
\family default
 is the package to write documentation.
 
\end_layout

\begin_layout Section
External Programs (1.3)
\end_layout

\begin_layout Standard
One can execute 
\family typewriter
bash
\family default
 commands with 
\family typewriter
run
\family default
.
 
\end_layout

\begin_layout Standard
Question: Trying to run a bash script using 
\family typewriter
run(`.
 myscript.sh`)
\family default
 produces a permission denied error (even though permissions are set so
 that others can execute.
 Why?
\end_layout

\begin_layout Standard
Commands are constructed like strings with interpolation: 
\family typewriter
`mkdir $myPath`
\family default
.
\end_layout

\begin_layout Standard
If the command contains quotes, first build a string and then interpolate
 it into the command:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

fPath = 
\begin_inset Quotes eld
\end_inset

'abc.txt'
\begin_inset Quotes erd
\end_inset

;
\end_layout

\begin_layout Plain Layout

`ls $fPath`
\end_layout

\end_inset


\end_layout

\begin_layout Section
Formatted Output
\end_layout

\begin_layout Subsection
Formatting individual numbers (1.3)
\end_layout

\begin_layout Standard
The 
\family typewriter
Formatting
\family default
 package seems to be the best bet.
 It uses 
\family typewriter
Python
\family default
 like syntax and can format multiple arguments simultaneously (not well
 documented).
 Example:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

fs = FormatExpr(
\begin_inset Quotes eld
\end_inset

{1:.2f} and {2:.3f}
\begin_inset Quotes erd
\end_inset

)
\end_layout

\begin_layout Plain Layout

format(fs, 1.123, 2)
\end_layout

\end_inset


\end_layout

\begin_layout Standard
yields 
\family typewriter
"1.12 and 2.000"
\family default
.
\end_layout

\begin_layout Standard
This cannot be used to format a vector of numbers in one command.
 Broadcasting also does not work.
 The easiest approach for this:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

println(round.(x, digits = 3))
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Formatting tables (1.3)
\end_layout

\begin_layout Standard
Latex output can be produced with 
\family typewriter
LatexTables.jl
\family default
.
\end_layout

\begin_layout Section
Functions and Methods
\end_layout

\begin_layout Subsection
Array inputs (1.3)
\end_layout

\begin_layout Standard
It is best to restrict inputs to 
\family typewriter
AbstractArray{T1}
\family default
 rather than 
\family typewriter
Array{T1}
\family default
.
 This way, array transformations, such as 
\family typewriter
reshape
\family default
, and 
\family typewriter
range
\family default
s are accepted.
 For example:
\end_layout

\begin_layout Itemize

\family typewriter
typeof(1:4) <: AbstractVector{T1} where T1 <: Integer
\end_layout

\begin_layout Subsection
Keyword arguments (1.3)
\end_layout

\begin_layout Standard
Passing keyword arguments through to another function is easy:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

function foo(x; kwargs...)
\end_layout

\begin_layout Plain Layout

	# This is how the args are accessed inside the function
\end_layout

\begin_layout Plain Layout

	println(kwargs[:a]); 
\end_layout

\begin_layout Plain Layout

	# All passed through and expanded into indvidual args.
 Note the semicolon.
\end_layout

\begin_layout Plain Layout

	bar(x; kwargs...); 
\end_layout

\begin_layout Plain Layout

end
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

bar(x; a=1, b=2) = println((a,b)); 
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

# Now we can call
\end_layout

\begin_layout Plain Layout

foo(1; b=5) == bar(x; a=1, b=5)
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Allowing a function to ignore 
\begin_inset Quotes eld
\end_inset

excessive
\begin_inset Quotes erd
\end_inset

 keyword arguments is also easy:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

function bar(x; a=1, kwargs...)
\end_layout

\begin_layout Plain Layout

	println((x,a));
\end_layout

\begin_layout Plain Layout

	println(kwargs);
\end_layout

\begin_layout Plain Layout

end
\end_layout

\begin_layout Plain Layout

# Can be called with any arguments as long as `x` is provided:
\end_layout

\begin_layout Plain Layout

bar(1, b=3)
\end_layout

\end_inset


\end_layout

\begin_layout Standard
This is useful for functions that pass similar sets of keyword arguments
 to several sub-functions.
\end_layout

\begin_layout Standard
The 
\family typewriter
CommonLH.KwArgs
\family default
 type and associated methods are useful for defining default values for
 keyword arguments.
\end_layout

\begin_layout Section
Installation (MacOS)
\end_layout

\begin_layout Standard
Install the 
\family typewriter
Julia_ver.app
\family default
 as usual.
\end_layout

\begin_layout Standard
Change 
\family typewriter
bash_profile
\family default
 to point to the new version's path.
\end_layout

\begin_layout Standard
Open Julia from Finder to override MacOS's refusal to start an unknown app.
\end_layout

\begin_layout Standard
Exit Julia
\end_layout

\begin_layout Standard
To keep previous packages:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

cp -r ~/.julia/environments/v1.2 ~/.julia/environments/v1.3
\end_layout

\end_inset


\end_layout

\begin_layout Standard
That also copied registries.
\end_layout

\begin_layout Standard
Then it's not a bad idea to run 
\family typewriter
]pkg up
\family default
 to get latest versions of packages that are used in 
\family typewriter
Main
\family default
.
\end_layout

\begin_layout Section
Miscellaneous
\end_layout

\begin_layout Standard
Introductions and guides:
\end_layout

\begin_layout Itemize
\begin_inset CommandInset href
LatexCommand href
name "From Zero to Julia"
target "https://techytok.com/from-zero-to-julia/"
literal "false"

\end_inset


\end_layout

\begin_layout Standard
Useful collections of tips, tricks, and style suggestions:
\end_layout

\begin_layout Itemize
\begin_inset CommandInset href
LatexCommand href
name "How my Julia coding style has changed"
target "https://www.juliabloggers.com/how-my-julia-coding-style-changed/"
literal "false"

\end_inset

.
 Note in particular:
\end_layout

\begin_deeper
\begin_layout Itemize
using named tuples and 
\family typewriter
@unpack
\family default
 for functions that return multiple arguments
\end_layout

\begin_layout Itemize
pointer to 
\family typewriter
DocStringExtensions.jl
\end_layout

\end_deeper
\begin_layout Itemize
\begin_inset CommandInset href
LatexCommand href
name "Traits"
target "https://www.juliabloggers.com/the-emergent-features-of-julialang-part-ii-traits/"
literal "false"

\end_inset


\end_layout

\begin_layout Section
Modules
\end_layout

\begin_layout Subsection
LOAD_PATH (1.1)
\end_layout

\begin_layout Standard
Only modules located somewhere along the 
\family typewriter
LOAD_PATH
\family default
 can be loaded with
\family typewriter
 using
\family default
.
\end_layout

\begin_layout Standard
But: If a directory contains 
\family typewriter
Project.toml
\family default
, it becomes a project directory and only entries listed in 
\family typewriter
Project.toml
\family default
 can be loaded (even if the directory is on the 
\family typewriter
LOAD_PATH
\family default
).
\end_layout

\begin_layout Standard
As a general rule, though: If one has to fiddle with the 
\family typewriter
LOAD_PATH
\family default
, something is probably not right.
 Packages have all their dependencies in 
\family typewriter
Project.toml
\family default
.
 Anything that gets run from the 
\family typewriter
REPL
\family default
 is 
\family typewriter
include
\family default
d.
 That only leaves potential startup code that sits in a 
\family typewriter
module
\family default
 as a candidate for being on the 
\family typewriter
LOAD_PATH
\family default
.
\end_layout

\begin_layout Subsection
Sub-Modules (1.1)
\end_layout

\begin_layout Standard
Functions from sub-modules can be exported by the main module.
 Example:
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=Python,basicstyle={\ttfamily},tabsize=4"
inline false
status open

\begin_layout Plain Layout

module scratch
\end_layout

\begin_layout Plain Layout

export foo
\end_layout

\begin_layout Plain Layout

module inner1
\end_layout

\begin_layout Plain Layout

    export foo
\end_layout

\begin_layout Plain Layout

    function foo()
\end_layout

\begin_layout Plain Layout

        println("foo")
\end_layout

\begin_layout Plain Layout

    end 
\end_layout

\begin_layout Plain Layout

end
\end_layout

\begin_layout Plain Layout

using .inner1
\end_layout

\begin_layout Plain Layout

end
\end_layout

\end_inset


\end_layout

\begin_layout Verbatim

\end_layout

\begin_layout Subsection
Extending a function in another module (1.1)
\end_layout

\begin_layout Standard
The problem: 
\end_layout

\begin_layout Itemize
Module 
\family typewriter
B
\family default
 defines type 
\family typewriter
Tb
\family default
 and function 
\family typewriter
foo(x :: Tb)
\family default
.
\end_layout

\begin_layout Itemize
Module 
\family typewriter
A
\family default
 contains a generic function 
\family typewriter
bar(x)
\family default
 that calls 
\family typewriter
foo()
\family default
.
 It should use the 
\family typewriter
foo()
\family default
 that matches the type of 
\family typewriter
x
\family default
.
 That is, when called as 
\family typewriter
foo(x :: Tb)
\family default
, we want to call 
\family typewriter
B.foo
\family default
.
\end_layout

\begin_layout Standard
Solution:
\end_layout

\begin_layout Itemize
Module 
\family typewriter
A
\family default
:
\end_layout

\begin_deeper
\begin_layout Itemize
Define the stub: 
\family typewriter
function foo end
\end_layout

\begin_layout Itemize
Call 
\family typewriter
foo(x)
\family default
 from within 
\family typewriter
bar
\family default
.
\end_layout

\end_deeper
\begin_layout Itemize
Module 
\family typewriter
B
\family default
:
\end_layout

\begin_deeper
\begin_layout Itemize
Define 
\family typewriter
function foo(x :: Tb)
\end_layout

\begin_layout Itemize

\family typewriter
import A.foo
\end_layout

\end_deeper
\begin_layout Itemize
Now 
\family typewriter
A.bar(x)
\family default
 knows about 
\family typewriter
B.foo()
\family default
 and calls it when the type matches the signature.
\end_layout

\begin_layout Standard
See 
\begin_inset CommandInset href
LatexCommand href
name "Duck typing when `quack` is not in `Base`"
target "https://discourse.julialang.org/t/duck-typing-when-quack-is-not-in-base/26011"
literal "false"

\end_inset

.
\end_layout

\begin_layout Section
Operators
\end_layout

\begin_layout Subsection
Logical (1.1)
\end_layout

\begin_layout Standard

\family typewriter
&&
\family default
 is the logical AND operator, but in broadcasting use 
\family typewriter
.&
\family default
 (even though 
\family typewriter
&
\family default
 is a bitwise AND).
\end_layout

\begin_layout Section
Optimization (Mathematical)
\end_layout

\begin_layout Standard
\begin_inset CommandInset href
LatexCommand href
name "JuMP"
target "https://github.com/JuliaOpt/JuMP.jl"
literal "false"

\end_inset

 is a popular interface, but it requires (as of v.0.2) analytical derivatives
 for all objective functions.
\end_layout

\begin_layout Standard
Collections:
\end_layout

\begin_layout Itemize
\begin_inset CommandInset href
LatexCommand href
name "NLopt"
target "https://github.com/JuliaOpt/NLopt.jl"
literal "false"

\end_inset


\end_layout

\begin_layout Subsection
NLopt (1.2)
\end_layout

\begin_layout Standard
Objective function requires gradient as input, even if it is not used.
 If gradient is not provided, NLopt returns 
\family typewriter
FORCED_STOP
\family default
 without error message.
\end_layout

\begin_layout Standard
When objective function errors, return value is 
\family typewriter
STOPVAL_REACHED
\family default
 and 
\family typewriter
fVal=0.0
\family default
.
\end_layout

\begin_layout Subsection
Noisy objectives
\end_layout

\begin_layout Standard
Useful discourse threads: 
\begin_inset CommandInset href
LatexCommand href
name "here"
target "https://discourse.julialang.org/t/optimizing-noisy-objective/25260"
literal "false"

\end_inset


\end_layout

\begin_layout Standard
\begin_inset CommandInset href
LatexCommand href
name "SPSA"
target "https://www.jhuapl.edu/SPSA/"
literal "false"

\end_inset

:
\end_layout

\begin_layout Itemize
according to the author: specifically made for simulation type problems
\end_layout

\begin_layout Itemize
basic idea seems to approximate derivatives, but instead of perturbing each
 parameter one-by-one (expensive), all are perturbed in the same step.
\end_layout

\begin_layout Itemize
extremely easy to implement
\end_layout

\begin_layout Itemize
can vary the distribution of step sizes (main algorithm uses step sizes
 1 or 2 times a 
\begin_inset Formula $c\left(k\right)$
\end_inset

).
\end_layout

\begin_layout Standard
COBYLA
\end_layout

\begin_layout Itemize
implemented in 
\begin_inset CommandInset href
LatexCommand href
name "NLopt COBYLA"
target "https://nlopt.readthedocs.io/en/latest/NLopt_Algorithms/"
literal "false"

\end_inset


\end_layout

\begin_layout Itemize
uses a linear approximation of the function
\end_layout

\begin_layout Standard
Subplex
\end_layout

\begin_layout Itemize
implemented in 
\begin_inset CommandInset href
LatexCommand href
name "NLopt Sbplx"
target "https://nlopt.readthedocs.io/en/latest/NLopt_Algorithms/"
literal "false"

\end_inset


\end_layout

\begin_layout Itemize
similar to Nelder-Mead, but claims to be more robust
\end_layout

\begin_layout Standard
Bayesian optimization
\end_layout

\begin_layout Subsection
Global algorithms
\end_layout

\begin_layout Standard
\begin_inset CommandInset href
LatexCommand href
name "QuadDIRECT"
target "https://github.com/timholy/QuadDIRECT.jl"
literal "false"

\end_inset


\end_layout

\begin_layout Itemize
combines ideas of DIRECT with local search
\end_layout

\begin_layout Itemize
points from local search are used to form boxes for the global search
\end_layout

\begin_layout Standard
\begin_inset CommandInset href
LatexCommand href
name "NODAL"
target "https://github.com/phrb/NODAL.jl"
literal "false"

\end_inset


\end_layout

\begin_layout Itemize
global optimization algorithms that can run in parallel
\end_layout

\begin_layout Itemize
possibly abandoned
\end_layout

\begin_layout Standard
Controlled Random Search
\end_layout

\begin_layout Itemize
implemented as 
\begin_inset CommandInset href
LatexCommand href
name "NLopt CRS"
target "https://nlopt.readthedocs.io/en/latest/NLopt_Algorithms/"
literal "false"

\end_inset


\end_layout

\begin_layout Itemize
starts from a random population of points
\end_layout

\begin_layout Itemize
the evolves these using heuristic rules.
\end_layout

\begin_layout Standard
MLSL
\end_layout

\begin_layout Itemize
implemented as 
\begin_inset CommandInset href
LatexCommand href
name "NLopt MLSL"
target "https://nlopt.readthedocs.io/en/latest/NLopt_Algorithms/"
literal "false"

\end_inset


\end_layout

\begin_layout Itemize
basic idea: multistart a local solver, avoiding resolving points that are
 close to each other
\end_layout

\begin_layout Standard
\begin_inset CommandInset href
LatexCommand href
name "BlackBoxOptim"
target "https://github.com/robertfeldt/BlackBoxOptim.jl"
literal "false"

\end_inset


\end_layout

\begin_layout Itemize
implements SPSA
\end_layout

\begin_layout Itemize
currently no documentation of algorithms (2019/09).
\end_layout

\begin_layout Section
Packages
\end_layout

\begin_layout Subsection
Environments (1.2)
\end_layout

\begin_layout Standard
An environment is anything with a 
\family typewriter
Project.toml
\family default
.
 When you start Julia, you enter the version's environment (e.g.
 1.1).
 When you add a package, you effectively edit 
\family typewriter
Project.toml
\family default
.
\end_layout

\begin_layout Standard
You can 
\series bold
add
\series default
 additional environments using 
\family typewriter
Pkg.activate()
\family default
 or 
\family typewriter
pkg> activate .

\family default
 and then 
\family typewriter
Pkg.add
\family default
 to initialize a 
\family typewriter
Mainfest.toml
\family default
 in that directory.
\end_layout

\begin_layout Standard
The environment determines how code is loaded.
 
\end_layout

\begin_layout Itemize
When you type 
\family typewriter
using M
\family default
 Julia looks for module 
\family typewriter
M
\family default
 in all directories that are listed in 
\family typewriter
LOAD_PATH
\family default
.
 
\end_layout

\begin_layout Itemize
Julia also looks in the directory of the currently activate package (which
 is 
\series bold
not
\series default
 added to the 
\family typewriter
LOAD_PATH
\family default
).
 Exactly what 
\family typewriter
Pkg.activate()
\family default
 does internally is not clear.
 Once you activate another package, previously activated packages are no
 longer considered during code loading.
\end_layout

\begin_layout Itemize
Note: Julia does 
\series bold
not
\series default
 look in the current directory (unlike Matlab).
 In fact, the current directory really does nothing at all, except it is
 the base directory for 
\family typewriter
REPL
\family default
 commands such as 
\family typewriter
cd()
\family default
 or 
\family typewriter
include()
\family default
.
\end_layout

\begin_layout Standard
When examining a particular directory in 
\family typewriter
LOAD_PATH
\family default
, what happens depends on whether the directory contains 
\family typewriter
Manifest.toml
\family default
 (or 
\family typewriter
Project.toml
\family default
; two go together).
 
\end_layout

\begin_layout Itemize
If it does not, Julia looks for 
\family typewriter
M.jl
\family default
 in this directory.
 
\end_layout

\begin_layout Itemize
Otherwise, Julia 
\series bold
only
\series default
 looks in 
\family typewriter
Manifest.toml
\family default
.
 The 
\series bold
only
\series default
 part is key.
 Julia does not look in the directory itself.
\end_layout

\begin_layout Subsubsection
Stacked environments
\end_layout

\begin_layout Standard
When you 
\family typewriter
activate
\family default
 an environment, you do 
\series bold
not
\series default
 deactivate previous environments.
 Instead, you now operate in a sort of union of all the environments that
 you activated during a session.
 This matters when both environments list the same packages in the Manifests.
\end_layout

\begin_layout Standard
Example: Start in environment 
\family typewriter
1.1
\family default
 and 
\family typewriter
Pkg.add(D)
\family default
.
 
\family typewriter
Pkg.activate(P)
\family default
 and 
\family typewriter
Pkg.add(D)
\family default
 with a different version of 
\family typewriter
D
\family default
 (or using the local path for 
\family typewriter
D
\family default
).
 Which version of 
\family typewriter
D
\family default
 is used after 
\family typewriter
using D
\family default
? The 
\begin_inset CommandInset href
LatexCommand href
name "answer"
target "https://docs.julialang.org/en/v1/manual/code-loading/"
literal "false"

\end_inset

 turns out to be that the most recent environment wins (that would usually
 be the currently activated project).
 
\end_layout

\begin_layout Standard
I encountered a case where I could not covince Julia to update an unregistered
 package, even using 
\family typewriter
Pkg.rm
\family default
 followed by 
\family typewriter
Pkg.add
\family default
.
 The reason was that 
\family typewriter
1.1
\family default
 referenced the same package, pointing to a fixed 
\family typewriter
github commit
\family default
.
\end_layout

\begin_layout Subsection
Creating a package
\end_layout

\begin_layout Subsubsection
PkgTemplates.jl (1.2)
\end_layout

\begin_layout Standard
See the 
\begin_inset CommandInset href
LatexCommand href
name "Documentation"
target "https://invenia.github.io/PkgTemplates.jl/stable/"
literal "false"

\end_inset

.
\end_layout

\begin_layout Subsubsection
PkgSkeleton.jl (1.2)
\end_layout

\begin_layout Standard
The easiest way is 
\family typewriter
PkgSkeleton.jl
\family default
.
 You need to set your 
\family typewriter
github
\family default
 info (
\family typewriter
user.name
\family default
 etc) using 
\end_layout

\begin_layout Standard

\family typewriter
git config --global user.name YourName
\end_layout

\begin_layout Standard
This must be done inside a 
\family typewriter
git
\family default
 directory.
 Then 
\family typewriter
generate
\family default
 generates the directory structure and the required files (
\family typewriter
Project.toml
\family default
 etc).
 Example:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

PkgSkeleton.generate(
\begin_inset Quotes eld
\end_inset

dir1/MyPackage
\begin_inset Quotes erd
\end_inset

)
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Details:
\end_layout

\begin_layout Itemize
I first create the repo on github and clone it to the local dir.
\end_layout

\begin_layout Itemize
Then I use 
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

PkgSkeleton.generate(
\begin_inset Quotes eld
\end_inset

MyPackage
\begin_inset Quotes erd
\end_inset

, skip_existing_dir = false)
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
This way everything is linked to github from the start.
\end_layout

\begin_layout Subsection
Package workflow (1.1)
\end_layout

\begin_layout Standard
Your packages will generally be unregistered.
 Your workflow needs to account for the fact that 
\family typewriter
Pkg
\family default
 does not track versions for unregistered packages.
\end_layout

\begin_layout Standard
Here are the steps:
\end_layout

\begin_layout Enumerate
Initialize a 
\family typewriter
package
\family default
 in a folder 
\family typewriter
pDir
\family default
; call the package 
\family typewriter
P
\family default
.
 This generates a directory structure with 
\family typewriter
src, test
\family default
, etc.
 If you plan on using this package as a dependency, it is best to place
 it in a sub-folder of 
\family typewriter
JULIA_PKG_DEVDIR
\family default
 (
\family typewriter
~/.julia/dev
\family default
 by default).
 The reason is that 
\family typewriter
Pkg.develop
\family default
 wants to download your code there.
\end_layout

\begin_layout Enumerate
While the code is being worked on: 
\family typewriter
Pkg.activate(ps)
\family default
.
 This makes sure that changes are written to the package's environment (
\family typewriter
Project.toml
\family default
).
\end_layout

\begin_layout Enumerate
To add registered dependencies, simply use 
\family typewriter
Pkg.add(pkgName)
\family default
.
 No problem.
\end_layout

\begin_layout Enumerate
To add unregistered dependencies 
\family typewriter
D
\family default
 that may change as you work on your project, use 
\family typewriter
Pkg.develop
\family default
 instead.
\end_layout

\begin_deeper
\begin_layout Enumerate
Write code that makes a 
\family typewriter
PackageSpec
\family default
 for 
\family typewriter
D
\family default
.
 This simplifies managing the package.
 Call this 
\family typewriter
ps
\family default
.
 
\family typewriter
ps
\family default
 should point to 
\family typewriter
D
\family default
's local directory, not to a 
\family typewriter
github
\family default
 url.
 Otherwise, you end up tracking what is on github rather than your local
 edits.
\end_layout

\begin_layout Enumerate

\family typewriter
Pkg.develop(ps)
\family default
 simply changes the entry for 
\family typewriter
D
\family default
 in 
\family typewriter
Project.toml
\family default
 from pointing at the 
\family typewriter
github repo
\family default
 to pointing at the local dir.
 Key point: This is only operative while the environment 
\family typewriter
P
\family default
 is active.
\end_layout

\begin_layout Enumerate

\family typewriter
Pkg.develop
\family default
 is an alternative to 
\family typewriter
Pkg.add
\family default
, which edits 
\family typewriter
Project.toml
\family default
 to point at 
\family typewriter
github
\family default
.
\end_layout

\end_deeper
\begin_layout Enumerate
To freeze the state of the code: 
\end_layout

\begin_deeper
\begin_layout Enumerate

\family typewriter
push
\family default
 
\family typewriter
P
\family default
 and 
\family typewriter
D 
\family default
to 
\family typewriter
github
\family default
.
\end_layout

\begin_layout Enumerate
in the environment for 
\family typewriter
P
\family default
: 
\family typewriter
Pkg.add(ps)
\family default
 where 
\family typewriter
ps
\family default
 should now point at the 
\family typewriter
github
\family default
 url for 
\family typewriter
D
\family default
.
\end_layout

\begin_layout Enumerate
Even if you continue to push updates for unregistered dependencies to 
\family typewriter
github
\family default
, your package should track the fixed versions (identified by the 
\family typewriter
sha
\family default
 key that defines the 
\family typewriter
commit
\family default
).
 Just don't run 
\family typewriter
Pkg.update
\family default
.
\end_layout

\end_deeper
\begin_layout Subsection
Unregistered packages as dependencies (1.1)
\end_layout

\begin_layout Standard
Important point: Unregistered packages need to be added as dependencies
 
\begin_inset Quotes eld
\end_inset

by hand.
\begin_inset Quotes erd
\end_inset

 
\family typewriter
Pkg
\family default
 cannot track when other packages depend on them.
 This is a known 
\begin_inset CommandInset href
LatexCommand href
name "issue 810"
target "https://github.com/JuliaLang/Pkg.jl/issues/810"
literal "false"

\end_inset

.
 That means:
\end_layout

\begin_layout Itemize
Suppose you are working in 
\family typewriter
P
\family default
 with dependency 
\family typewriter
D
\family default
 that depends on 
\family typewriter
E
\family default
.
\end_layout

\begin_layout Itemize

\family typewriter
Pkg.add(D)
\family default
 does not add 
\family typewriter
E
\family default
 to 
\family typewriter
P
\family default
's 
\family typewriter
Project.toml
\family default
.
 
\end_layout

\begin_layout Itemize
You need to explicitly 
\family typewriter
Pkg.add(E)
\family default
.
\end_layout

\begin_layout Standard
Tracking changes in unregistered packages can be done in several ways:
\end_layout

\begin_layout Itemize
The solution suggested on 
\begin_inset CommandInset href
LatexCommand href
name "discourse"
target "https://discourse.julialang.org/t/forced-recompilation/27367/4?u=hendri54"
literal "false"

\end_inset

 suggests to always 
\family typewriter
develop
\family default
 packages and to have relative paths in 
\family typewriter
Manifest.toml
\family default
.
 That would be relative paths of the form 
\family typewriter
../MyPackage
\family default
.
 User directory expansion, as in 
\family typewriter
~/abc
\family default
 does not work.
\end_layout

\begin_layout Itemize

\family typewriter
Pkg.add(url = 
\begin_inset Quotes eld
\end_inset

https://github.com/myUser/MyPkg
\begin_inset Quotes erd
\end_inset

)
\family default
 
\begin_inset CommandInset href
LatexCommand href
name "dowloads the lastest master and recompiles the code"
target "https://discourse.julialang.org/t/how-to-activate-a-package-in-a-script/28185/18"
literal "false"

\end_inset

.
 One option is therefore: run the code on the remote on a new environment.
 Add each unregistered dependency and then the main package.
 This is cumbersome, but can be done in a script.
 The key is to manually add all unregistered dependencies through that script.
 
\family typewriter
Pkg
\family default
 cannot do so automatically.
\end_layout

\begin_layout Itemize
Create your own package registry (not as hard as it sounds).
 Register all your packages.
 Then a simple 
\family typewriter
Pkg.add
\family default
 for the code that is actually to be run will automatically download all
 dependencies (which are now registered).
\end_layout

\begin_layout Standard
Note:
\end_layout

\begin_layout Itemize

\family typewriter
Pkg.update
\family default
 does nothing for unregistered dependencies.
 
\end_layout

\begin_layout Itemize
Deleting the corresponding subdirectory in 
\family typewriter
~/.julia/compiled
\family default
 sometimes triggers a recompile, but not always.
\end_layout

\begin_layout Itemize

\family typewriter
revise(MyPkg)
\family default
 does not trigger a recompile.
\end_layout

\begin_layout Standard
For small functions that are themselves stand-alone, it seems best to simply
 copy them into the project.
 This is the old trade-off between duplication and dependencies.
\end_layout

\begin_layout Subsection
Multiple Modules in one Package (1.2)
\end_layout

\begin_layout Standard
The cleanest approach is sub-modules.
 I.e.,
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

module Foo
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

include(
\begin_inset Quotes eld
\end_inset

That.jl
\begin_inset Quotes erd
\end_inset

)
\end_layout

\begin_layout Plain Layout

include(
\begin_inset Quotes eld
\end_inset

Bar.jl
\begin_inset Quotes erd
\end_inset

)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

using .Bar, .That
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

<code>
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

end
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

# In Bar.jl
\end_layout

\begin_layout Plain Layout

module Bar
\end_layout

\begin_layout Plain Layout

	using ..That
\end_layout

\begin_layout Plain Layout

	<code>
\end_layout

\begin_layout Plain Layout

end
\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
One can still 
\family typewriter
import Foo.Bar
\family default
 to only use the sub-module (especially for testing).
 In the test function, non-exported functions can be called as 
\family typewriter
Bar.f()
\family default
.
\end_layout

\begin_layout Subsection
Testing a package (1.2)
\end_layout

\begin_layout Standard
Activate the package by issuing 
\family typewriter
activate .

\family default
 in the package's directory (not in 
\family typewriter
src
\family default
).
 Then type 
\family typewriter
test
\family default
.
\end_layout

\begin_layout Standard
Note that the package needs the following in 
\family typewriter
Project.toml
\family default
:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

[extras] Test = "8dfed614-e22c-5e08-85e1-65c5234f0b40"
\end_layout

\begin_layout Plain Layout

[targets] test = ["Test"]
\end_layout

\end_inset


\end_layout

\begin_layout Standard
These are not automatically added.
 You need to hand-edit 
\family typewriter
Project.toml
\family default
.
 Or simply add 
\family typewriter
Test
\family default
 as a dependency directly.
\end_layout

\begin_layout Standard
Placing test code inside a module:
\end_layout

\begin_layout Itemize
This can be useful when the test code defines 
\family typewriter
structs
\family default
 that one would like to be able to modify without having to restart 
\family typewriter
Julia
\family default
 all the time.
 Note that objects defined in tests are no longer visible once 
\family typewriter
Pkg
\family default
 is exited.
\end_layout

\begin_layout Itemize
Place the module definition into 
\family typewriter
test
\family default
.
 Add 
\family typewriter
push(LOAD_PATH, @__DIR__)
\family default
.
 This has to be done in each module.
 Not elegant.
 This apparently no longer works in V1.2.
 It appears that tests cannot be in modules any more.
\end_layout

\begin_layout Subsection
Creating a package registry (1.2)
\end_layout

\begin_layout Standard
Any registry that lives in 
\family typewriter
~/.julia/registries
\family default
 is automatically used by 
\family typewriter
Pkg
\family default
.
\end_layout

\begin_layout Standard
In principle, it is easy to create your own registry (see 
\begin_inset CommandInset href
LatexCommand href
name "discourse"
target "https://discourse.julialang.org/t/creating-a-registry/12094"
literal "false"

\end_inset

 for a guide).
 The key to making it practical is 
\family typewriter
Registrator.jl
\family default
 (not the official one, but the one from Gunnar Farneback; see below).
\end_layout

\begin_layout Subsubsection
Using 
\family typewriter
Registrator.jl
\family default
 (1.2)
\end_layout

\begin_layout Standard
This is based on the workflow figured out by a 
\begin_inset CommandInset href
LatexCommand href
name "discourse user"
target "https://discourse.julialang.org/t/creating-a-custom-registry/28007"
literal "false"

\end_inset

.
 What I am writing up here copies their code almost one-for-one.
\end_layout

\begin_layout Paragraph
Creating the registry:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

Pkg.add(Pkg.PackageSpec(url="https://github.com/GunnarFarneback/Registrator.jl"))
\end_layout

\begin_layout Plain Layout

using Registrator
\end_layout

\begin_layout Plain Layout

# Switch to the parent directory of the registry repo
\end_layout

\begin_layout Plain Layout

cd(joinpath(homedir(), 
\begin_inset Quotes eld
\end_inset

Documents
\begin_inset Quotes erd
\end_inset

, 
\begin_inset Quotes eld
\end_inset

julia
\begin_inset Quotes erd
\end_inset

))
\end_layout

\begin_layout Plain Layout

regName = 
\begin_inset Quotes eld
\end_inset

registryLH
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Plain Layout

regUrl = 
\begin_inset Quotes eld
\end_inset

https://github.com/hendri54/$regName
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Plain Layout

regPath = joinpath(homedir(), 
\begin_inset Quotes eld
\end_inset

Documents
\begin_inset Quotes erd
\end_inset

, 
\begin_inset Quotes eld
\end_inset

julia
\begin_inset Quotes erd
\end_inset

, 
\begin_inset Quotes eld
\end_inset

registryLH
\begin_inset Quotes erd
\end_inset

)
\end_layout

\begin_layout Plain Layout

Registrator.create_registry(regName,  regUrl)
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Create the 
\family typewriter
registryLH
\family default
 repo on 
\family typewriter
github.com
\family default
 (not sure why this is necessary).
 Push the registry to github using
\end_layout

\begin_layout Standard

\family typewriter
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

git -C registryLH push -u -f origin master
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Check that 
\family typewriter
Registry.toml
\family default
 appears on github in the repo.
 Add the registry (cloning it to 
\family typewriter
.julia/registries
\family default
)
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

Pkg.Registry.add(Pkg.RegistrySpec(url = regUrl))
\end_layout

\end_inset


\end_layout

\begin_layout Standard
We now have an empty registry.
 Check that it can be used:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

Pkg.update()
\end_layout

\end_inset


\end_layout

\begin_layout Standard
This should now show 
\family typewriter
registryLH
\family default
 being updated.
\end_layout

\begin_layout Paragraph
Adding packages to the registry.
 
\end_layout

\begin_layout Standard
I am using 
\family typewriter
TestPkgLH
\family default
 for testing.
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

# Somehow get to the point where `using TestPkgLH` can be issued
\end_layout

\begin_layout Plain Layout

pkgName = 
\begin_inset Quotes eld
\end_inset

TestPkgLH
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Plain Layout

pkgRepo = 
\begin_inset Quotes eld
\end_inset

https://github.com/hendri54/TestPkgLH
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Plain Layout

# Somehow Julia knows where this is located (how?)
\end_layout

\begin_layout Plain Layout

Pkg.activate(pkgName)
\end_layout

\begin_layout Plain Layout

using TestPkgLH
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

# Register TestPkgLH
\end_layout

\begin_layout Plain Layout

Registrator.register(TestPkgLH, regPath)
\end_layout

\begin_layout Plain Layout

run(`git -C registryLH push origin master`)
\end_layout

\begin_layout Plain Layout

# Check on github that T/TestPkgLH appears in the repo
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

# Now we wish to `add` TestPkgLH to TestPkg2LH
\end_layout

\begin_layout Plain Layout

pkgName2 = 
\begin_inset Quotes eld
\end_inset

TestPkg2LH
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Plain Layout

pkgRepo2 = 
\begin_inset Quotes eld
\end_inset

https://github.com/hendri54/TestPkg2LH
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Plain Layout

Pkg.activate(pkgName2)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

# Without the `update` the `add` fails
\end_layout

\begin_layout Plain Layout

Pkg.Registry.update()
\end_layout

\begin_layout Plain Layout

# Make sure that the latest version of TestPkgLH has been pushed to github
 first.
\end_layout

\begin_layout Plain Layout

Pkg.add(pkgName)
\end_layout

\begin_layout Plain Layout

using TestPkg2LH
\end_layout

\begin_layout Plain Layout

Registrator.register(TestPkg2LH, regPath)
\end_layout

\begin_layout Plain Layout

run(`git -C registryLH push origin master`)
\end_layout

\begin_layout Plain Layout

Pkg.Registry.update()
\end_layout

\end_inset


\end_layout

\begin_layout Standard
It is currently not possible to run this from inside a module.
 For some reason, the wrong 
\family typewriter
Registrator
\family default
 is called (or 
\family typewriter
Registrator
\family default
 has no methods).
 So one has to do this 
\begin_inset Quotes eld
\end_inset

by hand
\begin_inset Quotes erd
\end_inset

 from the 
\family typewriter
REPL
\family default
 :
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

julia> activate_pkg("UtilityFunctionsLH") 
\end_layout

\begin_layout Plain Layout

Activating environment at `~/Documents/julia/UtilityFunctionsLH/Project.toml`
 /Users/lutz/Documents/julia/UtilityFunctionsLH
\end_layout

\begin_layout Plain Layout

julia> regPath = joinpath(homedir(), "Documents", "julia", "registryLH")
 
\end_layout

\begin_layout Plain Layout

"/Users/lutz/Documents/julia/registryLH"
\end_layout

\begin_layout Plain Layout

julia> isdir(regPath) 
\end_layout

\begin_layout Plain Layout

true
\end_layout

\begin_layout Plain Layout

julia> using UtilityFunctionsLH
\end_layout

\begin_layout Plain Layout

julia> register(UtilityFunctionsLH, regPath)
\end_layout

\begin_layout Plain Layout

# These last two steps are done by `PackageToolsLH.update_registry()`
\end_layout

\begin_layout Plain Layout

# Push to github
\end_layout

\begin_layout Plain Layout

julia> Pkg.Registry.update()
\end_layout

\end_inset


\end_layout

\begin_layout Standard
I packaged this into a function which is used as follows:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

using TestPkgLH
\end_layout

\begin_layout Plain Layout

include(
\begin_inset Quotes eld
\end_inset

shared/register_package.jl
\begin_inset Quotes erd
\end_inset

)
\end_layout

\begin_layout Plain Layout

register_package(TestPkgLH)
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Updating an existing package works in the same way.
 Increment the version number in 
\family typewriter
Project.toml
\family default
 and register the package again.
\end_layout

\begin_layout Subsection
Miscellaneous
\end_layout

\begin_layout Standard
Find out if a package is installed (present in current 
\family typewriter
Manifest
\family default
):
\end_layout

\begin_layout Itemize

\family typewriter
d = Pkg.installed()
\family default
 returns a 
\family typewriter
Dict
\family default
 with package names as keys.
\end_layout

\begin_layout Itemize

\family typewriter
haskey(d, MyPackage)
\family default
 returns true if package is installed.
\end_layout

\begin_layout Standard
Adding a private repo does not work with the standard 
\family typewriter
add
\family default
 syntax.
 
\end_layout

\begin_layout Itemize
It yields an error (
\begin_inset Quotes eld
\end_inset

redirect from HTTPS to HTTP no allowed
\begin_inset Quotes erd
\end_inset

).
 
\end_layout

\begin_layout Itemize
One needs to construct a 
\family typewriter
PackageSpec(url = 
\begin_inset Quotes eld
\end_inset

ssh://git@github.com/user/MyPackage.git
\begin_inset Quotes erd
\end_inset

)
\family default
.
 This will ask for the location of the ssh key.
\end_layout

\begin_layout Standard
Multiple packages depend on the same package.
\end_layout

\begin_layout Itemize
The question: which version of the dependency gets used?
\end_layout

\begin_layout Itemize
Answer (due to 
\begin_inset CommandInset href
LatexCommand href
name "Gunnar Farneback"
target "https://discourse.julialang.org/t/how-to-properly-depend-on-a-dependency-of-a-dependent-package/29291/3"
literal "false"

\end_inset

): 
\begin_inset Quotes eld
\end_inset

The general idea is that packages state which versions of their dependencies
 they are compatible with and it’s the job of the resolver to find a set
 of versions that works for all packages in the dependency chain.
 Another key idea is that only one version of each package can be loaded
 at a time, which is precisely the one that the resolver has chosen.
 If there are incompatible version requirements in the dependency chain
 the resolver will fail and you can’t load your package at all.
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Section
Parallel Computing
\end_layout

\begin_layout Standard
Useful overviews: 
\begin_inset CommandInset href
LatexCommand href
name "Bruel 2019"
target "https://phrb.github.io/2019-02-16-intro_parallel_julia/"
literal "false"

\end_inset


\end_layout

\begin_layout Subsection
Threads
\end_layout

\begin_layout Standard
Use shared memory.
 Simply place 
\family typewriter
Threads.@threads
\family default
 in front of a code section (typically a loop).
\end_layout

\begin_layout Standard
Runs on a single processor (with multiple cores).
\end_layout

\begin_layout Standard
Julia needs to be started with a command line argument that indicates the
 number of cores to use.
 Or issue 
\family typewriter
export JULIA_NUM_THREADS=8
\family default
 in shell (not persistent across sessions unless written into 
\family typewriter
bash_profile
\family default
).
\end_layout

\begin_layout Standard
Keeping track of progress:
\end_layout

\begin_layout Itemize
Standard 
\family typewriter
print
\family default
 statements are not displayed (or written to a log file) until the entire
 computation finishes.
\end_layout

\begin_layout Itemize
\begin_inset CommandInset href
LatexCommand href
name "This discourse thread"
target "https://discourse.julialang.org/t/print-functions-in-a-threaded-loop/12112/5"
literal "false"

\end_inset

 suggests that the solution is to use 
\family typewriter
Core.println
\family default
 (as opposed to 
\family typewriter
Base.println
\family default
 which is not thread-safe).
 Note that 
\family typewriter
Core.println
\family default
 does not accept 
\family typewriter
stdout
\family default
 as argument.
\end_layout

\begin_layout Itemize
Could also try to 
\family typewriter
flush(stdout)
\family default
 periodically.
\end_layout

\begin_layout Subsection
Distributed computation
\end_layout

\begin_layout Standard
Issue 
\family typewriter
using Distributed, SharedArrays
\family default
.
\end_layout

\begin_layout Standard
In front of the parallel loop, place 
\family typewriter
@sync @distributed
\family default
.
 The 
\family typewriter
@sync
\family default
 macro ensures that the code waits for completion of the loop before it
 continues.
\end_layout

\begin_layout Section
Performance
\end_layout

\begin_layout Standard
The compiler does not optimize out 
\family typewriter
if false
\family default
 statements.
 Hence, defining a constant that switches self-testing code on and off does
 not result in no-ops.
 Of course, the overhead is quite small.
\end_layout

\begin_layout Subsection
Profiling (1.3)
\end_layout

\begin_layout Standard
The output generated by the built-in profiler is hard to read.
 
\end_layout

\begin_layout Standard

\family typewriter
ProfileView
\family default
 now does compile, taking a surprisingly long time.
 Personally, I find the presentation of 
\family typewriter
StatProfilerHTML
\family default
 more convenient, though.
\end_layout

\begin_layout Standard

\family typewriter
StatProfilerHTML
\family default
 is a good alternative (1.1).
 
\end_layout

\begin_layout Itemize
It provides a flame graph with clickable links that show which lines in
 a function take up most time.
\end_layout

\begin_layout Itemize
Need to locate 
\family typewriter
index.html
\family default
 and open it by hand in the browser after running 
\family typewriter
statprofilehtml()
\family default
.
\end_layout

\begin_layout Standard

\family typewriter
PProf.jl
\family default
:
\end_layout

\begin_layout Itemize
requires 
\family typewriter
Graphviz
\family default
.
 On MacOS, install using 
\family typewriter
brew install graphviz
\family default
.
 But it has TONS of dependencies and did not install on my system.
 Then PProf cannot be used.
\end_layout

\begin_layout Standard

\family typewriter
\begin_inset CommandInset href
LatexCommand href
name "TimerOutputs.jl"
target "https://github.com/KristofferC/TimerOutputs.jl"
literal "false"

\end_inset


\end_layout

\begin_layout Itemize
can be used to time selected lines of code
\end_layout

\begin_layout Itemize
produces a nicely formatted table that is much easier to digest than profiler
 output.
\end_layout

\begin_layout Subsection
Type stability
\end_layout

\begin_layout Standard
One can automate checking for type stability using the 
\family typewriter
code_warntype()
\family default
 function.
 Example:
\end_layout

\begin_layout Itemize
For function 
\family typewriter
foo(x)
\family default
, call 
\family typewriter
code_warntype(stdout, foo, (Int,1))
\family default
.
\end_layout

\begin_layout Itemize
This can be written to a file by changing the 
\family typewriter
IO
\family default
 argument.
\end_layout

\begin_layout Itemize
It generates output even if no issues are found.
\end_layout

\begin_layout Itemize
The amount of output generated is overwhelming.
 Signs of trouble are 
\family typewriter
Union
\family default
 types, especially return types (at 
\family typewriter
Body:
\family default
).
\end_layout

\begin_layout Standard
\begin_inset CommandInset href
LatexCommand href
name "Cthulhu.jl"
target "https://github.com/JuliaDebug/Cthulhu.jl"
literal "false"

\end_inset

 is a tool for debugging type instability.
\end_layout

\begin_layout Section
Regressions
\end_layout

\begin_layout Standard
RegressionTables.jl produces formatted regression tables.
\end_layout

\begin_layout Subsection
GLM (1.2)
\end_layout

\begin_layout Standard
GLM.jl is the package to run regressions.
\end_layout

\begin_layout Standard
To save just the regression results (without the data, which could be a
 lot of memory), use 
\family typewriter
coeftable(mdl)
\family default
.
 This produces a 
\family typewriter
StatsBase.CoefTable
\family default
.
\end_layout

\begin_layout Standard
Alternative, use 
\family typewriter
RegressionTable
\family default
 from 
\family typewriter
EconometricsLH
\family default
.
\end_layout

\begin_layout Standard
Categorical regressors return names such as 
\family typewriter
Symbol(
\begin_inset Quotes eld
\end_inset

school: 3
\begin_inset Quotes erd
\end_inset

)
\family default
.
\end_layout

\begin_layout Standard
A useful introduction is in 
\begin_inset CommandInset href
LatexCommand href
name "cookbooks"
target "http://julia.cookbook.tips/doku.php?id=multistats"
literal "false"

\end_inset

.
\end_layout

\begin_layout Section
Remote Clusters
\end_layout

\begin_layout Subsection
Getting started with a test script
\end_layout

\begin_layout Standard
How to get your code to run on a typical Linux cluster?
\end_layout

\begin_layout Itemize
Get started by writing a simple test script (
\family typewriter
Test3.jl
\family default
) so we can test running from the command line.
 
\end_layout

\begin_layout Itemize
Add the Julia binary to the 
\family typewriter
PATH
\family default
 using (on Macos, editing 
\family typewriter
~/.bash_profile
\family default
):
\family typewriter
 
\begin_inset Newline newline
\end_inset

PATH="/Applications/Julia-1.1.app/Contents/Resources/julia/bin:$PATH"
\end_layout

\begin_layout Itemize
Then make sure you can run the test script locally with
\family typewriter

\begin_inset Newline newline
\end_inset

julia 
\begin_inset Quotes eld
\end_inset

/full/path/to/Test3.jl
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Standard
Now copy 
\family typewriter
Test3.jl
\family default
 to a directory on the cluster and repeat the same.
\end_layout

\begin_layout Itemize
You may need to add the Julia binary to the path.
 
\end_layout

\begin_deeper
\begin_layout Itemize
On Longleaf (editing 
\family typewriter
~/.bash_profile)
\family default
:
\begin_inset Newline newline
\end_inset


\family typewriter
export PATH="/nas/longleaf/apps/julia/1.3.0/bin:$PATH"
\end_layout

\begin_layout Itemize
The more robust approach is 
\family typewriter
module add julia/1.3.0
\family default
.
\end_layout

\end_deeper
\begin_layout Itemize
Then run 
\family typewriter
julia "/full/path/to/Test3.jl"
\end_layout

\begin_layout Standard
Now run the test script via batch file:
\end_layout

\begin_layout Standard

\family typewriter
sbatch -p general -N 1 -J "test_job" -t 3-00 --mem 16384 -n 1 --mail-type=end
 --mail-user=lhendri@email.unc.edu -o "test1.out" --wrap="julia /full/path/to/Test3.
jl"
\end_layout

\begin_layout Subsection
Generate an ssh key
\end_layout

\begin_layout Standard
This allows log on without password.
 Instructions 
\begin_inset CommandInset href
LatexCommand href
name "on the web"
target "https://www.digitalocean.com/community/articles/how-to-set-up-ssh-keys--2"
literal "false"

\end_inset

.
\end_layout

\begin_layout Standard
Now you can use the terminal to log in with 
\family typewriter
ssh user@longleaf.unc.edu
\family default
.
\end_layout

\begin_layout Subsection
Rsync File Transfer
\begin_inset CommandInset label
LatexCommand label
name "subsec:Rsync-File-Transfer"

\end_inset


\end_layout

\begin_layout Standard
A reliable command line transfer option is 
\family typewriter
rsync
\family default
.
 The command would be something like
\end_layout

\begin_layout Standard

\family typewriter
rsync -atuzv "/someDirectory/sourceDir/" "username@longleaf.unc.edu:someDirectoryS
ourceDir"
\end_layout

\begin_layout Standard
Notes: 
\end_layout

\begin_layout Itemize
The source dir should end in 
\begin_inset Quotes eld
\end_inset

/
\begin_inset Quotes erd
\end_inset

; the target dir should not.
\end_layout

\begin_layout Itemize
Exluding 
\family typewriter
.git
\family default
 speeds up the transfer.
\end_layout

\begin_layout Itemize

\family typewriter
--delete
\family default
 ensures that no old files remain on the server.
\end_layout

\begin_layout Standard
To transfer an individual file: 
\family typewriter
run(`scp $filename hostname:/path/to/newfile.txt')
\end_layout

\begin_layout Subsection
Git File Transfer
\end_layout

\begin_layout Enumerate
Change into the package directory (which is already a 
\family typewriter
git repo
\family default
).
\end_layout

\begin_layout Enumerate
Add a remote destination (once):
\family typewriter

\begin_inset Newline newline
\end_inset

git remote add longleaf ssh://lhendri@longleaf.unc.edu/nas/longleaf/home/lhendri/j
ulia/SampleModel
\end_layout

\begin_layout Enumerate
Initialize the remote directory with a bare repo:
\family typewriter
 git init --bare
\family default
.
 Bare means that the actual files are not copied there.
 It needs to be bare so 
\family typewriter
push
\family default
 does not produce errors later.
\end_layout

\begin_layout Enumerate
Verify the remote: 
\family typewriter
git remote show longleaf
\end_layout

\begin_layout Standard
When files have changed:
\end_layout

\begin_layout Enumerate
Change into the package directory
\end_layout

\begin_layout Enumerate

\family typewriter
git commit -am 
\begin_inset Quotes eld
\end_inset

commit message
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Enumerate

\family typewriter
git push longleaf master
\end_layout

\begin_layout Standard
Note that this does not upload any files! So this only works for packages,
 not for code that should be run outside of packages.
\end_layout

\begin_layout Subsection
Running code on the cluster
\end_layout

\begin_layout Standard
Steps:
\end_layout

\begin_layout Enumerate
Copy your code and all of its dependencies to the cluster (see 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Rsync-File-Transfer"
plural "false"
caps "false"
noprefix "false"

\end_inset

).
 This is not needed when all dependencies are registered.
\end_layout

\begin_layout Enumerate
Write a Julia script that contains the startup code for the project and
 then runs the actual computation (call this 
\family typewriter
batch.jl
\family default
).
\end_layout

\begin_layout Enumerate
Write a batch file that submits 
\family typewriter
julia batch.jl
\family default
 as a job to the cluster's job scheduler.
 For UNC's 
\family typewriter
longleaf
\family default
 cluster, this would be slurm.
 So you need to write 
\family typewriter
job.sl
\family default
 that will be submitted using 
\family typewriter
sbatch job.sl
\family default
.
\end_layout

\begin_layout Subsubsection
The Julia script
\end_layout

\begin_layout Standard
Submitting a job is (almost) equivalent to 
\family typewriter
julia batch.jl
\family default
 from the terminal.
\end_layout

\begin_layout Itemize
Note: 
\family typewriter
cd()
\family default
 does not work in these command files.
 To include a file, provide a full path.
\end_layout

\begin_layout Standard
If you only use registered packages, life is easy.
 Your code would simply say:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

using Pkg
\end_layout

\begin_layout Plain Layout

# This needs to be run only once
\end_layout

\begin_layout Plain Layout

Pkg.add(MyPackage)
\end_layout

\begin_layout Plain Layout

# If you want the latest version each time
\end_layout

\begin_layout Plain Layout

Pkg.update()
\end_layout

\begin_layout Plain Layout

using MyPackage
\end_layout

\begin_layout Plain Layout

MyPackage.run()
\end_layout

\end_inset


\end_layout

\begin_layout Standard
If the code for 
\family typewriter
MyPackage
\family default
 has been copied to the remote, then
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

julia --project=
\begin_inset Quotes erd
\end_inset

/path/to/MyPackage
\begin_inset Quotes erd
\end_inset

 --startup-file=no batch.jl
\end_layout

\end_inset

activates 
\family typewriter
MyPackage
\family default
 and runs 
\family typewriter
batch.jl
\family default
.
 The 
\family typewriter
--project
\family default
 option is equivalent to 
\family typewriter
Pkg.activate
\family default
.
\end_layout

\begin_layout Itemize
Julia looks for 
\family typewriter
batch.jl
\family default
 in the directory that was active when Julia was invoked (in this case:
 when 
\family typewriter
sbatch
\family default
 was invoked).
\end_layout

\begin_layout Itemize
Disabling the 
\family typewriter
startup-file
\family default
 prevents surprises where the 
\family typewriter
startup-file
\family default
 changes the directory before looking for 
\family typewriter
batch.jl
\family default
.
\end_layout

\begin_layout Itemize

\family typewriter
~
\family default
 is not expanded when relative paths are used.
\end_layout

\begin_layout Standard
If 
\family typewriter
MyPackage
\family default
 contains is unregistered or contains 
\series bold
unregistered dependencies
\series default
, things get more difficult.
 Now 
\family typewriter
batch.jl
\family default
 must:
\end_layout

\begin_layout Enumerate
Activate the package's environment.
\end_layout

\begin_layout Enumerate

\family typewriter
develop
\family default
 all unregistered dependencies.
 This replaces the invalid paths to directories on the local machine (e.g.
 
\family typewriter
/Users/lutz/julia/...
\family default
) with the corresponding paths on the cluster (e.g.
 
\family typewriter
/nas/longleaf/...
\family default
).
 Note: I verified that one cannot replace 
\family typewriter
homedir()
\family default
 with ~ in 
\family typewriter
Manifest.toml.
\end_layout

\begin_layout Enumerate

\family typewriter
using MyPackage
\end_layout

\begin_layout Enumerate

\family typewriter
MyPackage.run()
\end_layout

\begin_layout Standard
Developing 
\family typewriter
MyPackage
\family default
 in a blank folder does not work (for reasons I do not understand).
 It results in errors indicating that dependencies of 
\family typewriter
MyPackage
\family default
 could not be found.
\end_layout

\begin_layout Standard
This approach requires you to keep track of all unregistered dependencies
 and where they are located on the remote machine.
 My way of doing this is contained in 
\family typewriter
PackageTools.jl
\family default
 in the 
\family typewriter
shared
\family default
 repo (this is not a package b/c its very purpose is to facilitate loading
 of unregistered packages).
\end_layout

\begin_layout Standard
For an example implementation of the entire process, see 
\family typewriter
batch_commands.jl
\family default
 in 
\family typewriter
TestPkg2LH
\family default
.
 
\end_layout

\begin_layout Itemize
This uses 
\family typewriter
PackageToolsLH
\family default
 to handle directories on different computers and file transfer.
 
\end_layout

\begin_layout Itemize

\family typewriter
write_command_file()
\family default
 writes the julia file that is to be executed remotely (
\family typewriter
command_file.jl
\family default
).
\end_layout

\begin_layout Itemize

\family typewriter
write_sbatch
\family default
 writes the sbatch file that will be submitted to 
\family typewriter
slurm
\family default
.
\end_layout

\begin_layout Itemize

\family typewriter
project_upload()
\family default
 uses 
\family typewriter
rsync
\family default
 to copy the code of the project, its dependencies, and some general purpose
 code that is required at startup (mainly 
\family typewriter
PackageToolsLH
\family default
 itself) to the remote machine.
\end_layout

\begin_layout Subsubsection
The sbatch file
\end_layout

\begin_layout Standard
How this works can be looked up online.
 The only trick is that the Julia command requires a full path (or a relative
 path, but that's a little risky) on the remote machine.
 
\end_layout

\begin_layout Standard

\family typewriter
FilesLH
\family default
 keeps track of where things are on each machine.
 It is used to build the full paths.
\end_layout

\begin_layout Subsubsection
Instantiating Packages
\end_layout

\begin_layout Standard
If all dependencies are registered, simply activate an environment and 
\family typewriter
>pkg add https://github.com/user/MyPackage.git
\family default
 followed by 
\family typewriter
using MyPackage
\family default
.
\end_layout

\begin_layout Standard
When packages are run, all dependencies must be installed.
 This would usually be done with 
\family typewriter
instantiate
\family default
.
 But this fails when the package is 
\family typewriter
develop
\family default
ed rather than 
\family typewriter
add
\family default
ed.
 Therefore: if a package fails to build or test (for example, after its
 first upload, or after new dependencies are installed that the remote machine
 does not have installed):
\end_layout

\begin_layout Enumerate
An indicator that a dependency is missing is the error message: 
\family typewriter
ERROR: MethodError: Cannot `convert` an object of type Nothing to an object
 of type Base.SHA1
\end_layout

\begin_layout Enumerate
Switch to a test environment where one can mess up the 
\family typewriter
Project.toml
\family default
.
\end_layout

\begin_layout Enumerate

\family typewriter
Pkg.add(ps)
\family default
 where 
\family typewriter
ps
\family default
 is the 
\family typewriter
PackageSpec
\family default
 for the package that does not build.
 It must point at the 
\family typewriter
github
\family default
 url.
\end_layout

\begin_layout Enumerate
This is not always enough.
 In that case, 
\family typewriter
activate
\family default
 the package that does not build.
 Use 
\family typewriter
>pkg st -m
\family default
 to show the packages that are not loaded and simply 
\family typewriter
add
\family default
 them until the package builds and tests.
\end_layout

\begin_layout Standard
Now the package can be built or developed everywhere.
\end_layout

\begin_layout Standard
Sometimes old versions of 
\family typewriter
Project.toml
\family default
 lie around somewhere (where?) in the Julia installation.
 They may contain dependencies that don't exist anymore.
 Then the package does not build.
 The only solution that seems to work: 
\family typewriter
Pkg.add
\family default
 the package from somewhere with a 
\family typewriter
PackageSpec
\family default
 that points at 
\family typewriter
github
\family default
.
\end_layout

\begin_layout Itemize
For this purpose, it is useful to have an environment lying around that
 is just for adding packages that need to be downloaded.
\end_layout

\begin_layout Section
Types (1.3)
\end_layout

\begin_layout Standard
I find it easiest to write model specific code NOT using parametric types.
 Instead, I define 
\family typewriter
type aliases
\family default
 for the types used in custom types (e.g., 
\family typewriter
Double=Float64
\family default
).
 Then I hardwire the use of 
\family typewriter
Double
\family default
 everywhere.
 This removes two problems:
\end_layout

\begin_layout Enumerate
Possible type instability as the compiler tries to figure out the types
 of the custom type fields.
\end_layout

\begin_layout Enumerate
It becomes possible to call constructors with, say, integers of all kinds
 without raising method errors.
\end_layout

\begin_layout Subsection
Constructors (1.1)
\end_layout

\begin_layout Standard
Constructing objects with many fields:
\end_layout

\begin_layout Itemize
Define an inner constructor that leaves the object (partially) uninitialized.
 It is legal to have new(x) even if the object contains additional fields.
\end_layout

\begin_layout Standard

\family typewriter
Parameters.jl
\family default
 is useful for objects with default values.
\end_layout

\begin_layout Itemize
Constructor must then provide all arguments that do not have defaults.
\end_layout

\begin_layout Itemize
Note that 
\family typewriter
@with_kw
\family default
 automatically defines 
\family typewriter
show()
\family default
.
 Use 
\family typewriter
@with_kw_noshow
\family default
 to avoid this.
\end_layout

\begin_layout Subsection
Inheritance (1.1)
\end_layout

\begin_layout Standard
There is no inheritance in Julia.
 Abstract types have no fields and concrete types have no subtypes.
\end_layout

\begin_layout Standard
There are various 
\begin_inset CommandInset href
LatexCommand href
name "discussions"
target "https://discourse.julialang.org/t/composition-and-inheritance-the-julian-way/11231"
literal "false"

\end_inset

 about how to implement types that share common fields.
\end_layout

\begin_layout Standard
For simple cases, it is probably best to just repeat the fields in all types.
 This can be automated using 
\family typewriter
@forward
\family default
 in 
\family typewriter
Lazy.jl
\family default
.
 
\end_layout

\begin_layout Standard
One good piece of advice: ensure that methods are generally defined on the
 abstract type, so that all concrete types have the same interface (kind
 of the point of having an abstract type).
\end_layout

\begin_layout Subsection
Loading and saving (1.1)
\end_layout

\begin_layout Standard

\family typewriter
using FileIO
\family default
 and extension 
\family typewriter
.jld2
\family default
 automatically saves in 
\family typewriter
jld2
\family default
 format.
 This can save used defined types.
\end_layout

\begin_layout Standard
Loading user defined types is more complicated.
 All modules needed to construct the loaded types need to be known in the
 loading module and in 
\family typewriter
Main
\family default
.
 See 
\begin_inset CommandInset href
LatexCommand href
name "Issue 134"
target "https://github.com/JuliaIO/JLD2.jl/issues/134"
literal "false"

\end_inset

.
 It is not possible to use 
\family typewriter
Core.eval(Main, :(using Module))
\family default
 for unclear reasons.
 
\end_layout

\begin_layout Standard
Implications:
\end_layout

\begin_layout Enumerate
Each user defined type needs its own 
\family typewriter
load
\family default
 function.
\end_layout

\begin_layout Enumerate
All dependencies need to imported into 
\family typewriter
Main
\family default
 
\begin_inset Quotes eld
\end_inset

by hand
\begin_inset Quotes erd
\end_inset

 for each loaded object.
\end_layout

\begin_layout Standard
An alternative is 
\family typewriter
BSON.jl
\family default
.
 It has the same limitation.
\end_layout

\begin_layout Standard
One could save the 
\family typewriter
ParamVector
\family default
s in each object and reconstruct the object from those (recursively).
 This, of course, only works for objects that can be constructed from 
\family typewriter
ParamVector
\family default
s.
 Each 
\family typewriter
ParamVector
\family default
 could be stored as a 
\family typewriter
Dict{Symbol, Any}
\family default
.
 But even easier: store the 
\family typewriter
ParamVector
\family default
s directly.
 Constructing them after loading only requires 
\family typewriter
modelLH
\family default
.
 The approach would then be:
\end_layout

\begin_layout Enumerate
Collect the 
\family typewriter
ParamVector
\family default
s from all model objects into a 
\family typewriter
Dict{Symbol,ParamVector}
\family default
.
 The symbol identifies the associated model object.
\end_layout

\begin_layout Enumerate
Save the 
\family typewriter
Dict
\family default
.
\end_layout

\begin_layout Enumerate
In 
\family typewriter
Main: 
\family default
using modelLH, so that loading works.
\end_layout

\begin_layout Enumerate
Function that loads the model: 
\end_layout

\begin_deeper
\begin_layout Enumerate
Construct the model object with arbitrary default values.
\end_layout

\begin_layout Enumerate
Load the 
\family typewriter
ParamVector
\family default
s.
 
\end_layout

\begin_layout Enumerate
Sync each 
\family typewriter
ParamVector
\family default
's parameters into the correct model object.
 Essentially, the model object needs a constructor that accepts a 
\family typewriter
ParamVector
\family default
.
\end_layout

\end_deeper
\begin_layout Section
Unit Testing (1.2)
\end_layout

\begin_layout Standard
Goals:
\end_layout

\begin_layout Enumerate
Ensure that tests are self-contained, so that each can be run independently.
\end_layout

\begin_layout Standard
My current approach:
\end_layout

\begin_layout Enumerate
Place each group of tests into a module, so the tests are independent of
 each other and can be run independently.
 
\family typewriter
SafeTestsets.jl
\family default
 has a similar idea, but I find it cleaner to explicitly write out the modules.
\end_layout

\begin_layout Enumerate

\family typewriter
runtests.jl
\family default
 simply contains a list of 
\family typewriter
include
\family default
 statements; one for each test module.
 Those are wrapped in a 
\family typewriter
@testset
\family default
 for nice display and to ensure that errors don't stop the tests.
\end_layout

\begin_layout Enumerate
Each test module also contains a 
\family typewriter
@testset
\family default
.
\end_layout

\begin_layout Enumerate
When 
\family typewriter
runtests
\family default
 is run, it displays a single success summary.
 But when there are errors, they are nicely broken down by 
\family typewriter
testset
\family default
.
\end_layout

\begin_layout Enumerate
To run tests selectively, simply 
\family typewriter
include
\family default
 the file that contains the 
\family typewriter
@testset
\family default
 at the 
\family typewriter
REPL
\family default
.
 
\end_layout

\begin_layout Standard
Errors in the code to be tested (but not caught by 
\family typewriter
@test
\family default
) cause the entire test run to crash.
 Preventing this requires all tests to be enclosed in a 
\family typewriter
@testset
\family default
.
 A sequence of 
\family typewriter
@testset
\family default
 does not do the trick.
 An error in one prevents all others from being run.
 Nested 
\family typewriter
@testset
\family default
s produce nested error reports (nice).
\end_layout

\begin_layout Standard

\family typewriter
@test
\family default
 statements can be placed inside functions.
 To preserve result reporting, the function should contain a @testset and
 return its result.
\end_layout

\begin_layout Standard
Test dependencies now need to be added to the 
\family typewriter
Project.toml
\family default
 file in 
\family typewriter
./test
\family default
.
\end_layout

\begin_layout Subsection
Travis CI (1.2)
\end_layout

\begin_layout Standard
Travis can automatically test all branches uploaded to github.
\end_layout

\begin_layout Standard
Need to customize 
\family typewriter
travis.yml
\family default
 to only build for the current Julia version.
 
\end_layout

\begin_layout Standard
Building with unregistered dependencies is tricky.
 Probably ok if the dependencies are added (so they point to a github url),
 but not if they are 
\family typewriter
develop
\family default
ed.
\end_layout

\begin_layout Section
Workflow (1.2)
\end_layout

\begin_layout Standard

\family typewriter
Revise 
\family default
is key.
 It is now possible to simply use 
\family typewriter
using
\family default
 on any 
\family typewriter
module
\family default
 once.
 
\family typewriter
Revise
\family default
 then automatically keeps track of changes.
 Using 
\family typewriter
includet
\family default
 creates problems for me.
\end_layout

\begin_layout Standard
But keep in mind that 
\family typewriter
Revise
\family default
 cannot handle:
\end_layout

\begin_layout Enumerate
changes in file structure (you factor out some code into a new file that
 is 
\family typewriter
include
\family default
d in the main file);
\end_layout

\begin_layout Enumerate
changes in 
\family typewriter
struct
\family default
s.
 
\end_layout

\begin_layout Standard
Those still require restarting the 
\family typewriter
REPL
\family default
.
\end_layout

\begin_layout Standard
\begin_inset CommandInset line
LatexCommand rule
offset "0.5ex"
width "100col%"
height "1pt"

\end_inset


\end_layout

\end_body
\end_document
