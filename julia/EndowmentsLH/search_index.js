var documenterSearchIndex = {"docs":
[{"location":"index.html#EndowmentsLH","page":"EndowmentsLH","title":"EndowmentsLH","text":"","category":"section"},{"location":"index.html","page":"EndowmentsLH","title":"EndowmentsLH","text":"The purpose of this package is to provide a uniform interface for storing, accessing, and validating endowment draws in heterogeneous agent economic models.","category":"page"},{"location":"index.html","page":"EndowmentsLH","title":"EndowmentsLH","text":"Endowment draws are collected in the EndowmentDraws object. These draws can be scalars or custom, user defined data types.","category":"page"},{"location":"index.html","page":"EndowmentsLH","title":"EndowmentsLH","text":"Each Endowment contains information about its marginal distribution, encoded as an AbstractMarginal. This allows automatic checking of types and bounds. The following marginal distributions are predefined:","category":"page"},{"location":"index.html","page":"EndowmentsLH","title":"EndowmentsLH","text":"UniformMarginal\nNormalMarginal\nBetaMarginal\nPercentileMarginal\nBoundedMarginal\nUnboundedMarginal","category":"page"},{"location":"index.html","page":"EndowmentsLH","title":"EndowmentsLH","text":"All of these handle scalar Float or Integer draws, which constitute the majority of the draws in the kinds of models that I work with. The user can define additional marginal distributions (see below).","category":"page"},{"location":"index.html","page":"EndowmentsLH","title":"EndowmentsLH","text":"Each marginal comes with a validate_draws function that validates that endowment draws are valid for this marginal.","category":"page"},{"location":"index.html","page":"EndowmentsLH","title":"EndowmentsLH","text":"Bounded marginals define lb and ub. Where known, quantiles can be looked up with marginal_quantile.","category":"page"},{"location":"index.html","page":"EndowmentsLH","title":"EndowmentsLH","text":"EndowmentDraws\nEndowment\nAbstractMarginal\nUniformMarginal\nNormalMarginal\nBetaMarginal\nPercentileMarginal\nUnboundedMarginal\nvalidate_draws\nlb\nub\nmarginal_quantile\ncorr_matrix\nformatted_corr_matrix","category":"page"},{"location":"index.html#EndowmentsLH.EndowmentDraws","page":"EndowmentsLH","title":"EndowmentsLH.EndowmentDraws","text":"EndowmentDraws()\n\n\nConstructor for EndowmentDraws.\n\n\n\n\n\n","category":"type"},{"location":"index.html#EndowmentsLH.Endowment","page":"EndowmentsLH","title":"EndowmentsLH.Endowment","text":"Meta information about one endowment. Contains a name, label, and its marginal distribution.\n\nExample\n\ne = Endowment(:afqt, \"Test score\", PercentileMarginal{Float64}())\n\n\n\n\n\n","category":"type"},{"location":"index.html#EndowmentsLH.AbstractMarginal","page":"EndowmentsLH","title":"EndowmentsLH.AbstractMarginal","text":"Abstract type for marginal distributions of endowments.\n\n\n\n\n\n","category":"type"},{"location":"index.html#EndowmentsLH.UniformMarginal","page":"EndowmentsLH","title":"EndowmentsLH.UniformMarginal","text":"Uniform marginal distribution over fixed bounds.\n\n\n\n\n\n","category":"type"},{"location":"index.html#EndowmentsLH.NormalMarginal","page":"EndowmentsLH","title":"EndowmentsLH.NormalMarginal","text":"Normal(mean, std) marginal. Should store the Normal object +++\n\n\n\n\n\n","category":"type"},{"location":"index.html#EndowmentsLH.BetaMarginal","page":"EndowmentsLH","title":"EndowmentsLH.BetaMarginal","text":"Beta marginal distribution. Characterized by lower bound, upper bound, and Beta parameters alpha and beta.\n\n\n\n\n\n","category":"type"},{"location":"index.html#EndowmentsLH.PercentileMarginal","page":"EndowmentsLH","title":"EndowmentsLH.PercentileMarginal","text":"Marginal distribution that is Uniform[0, 1].\n\n\n\n\n\n","category":"type"},{"location":"index.html#EndowmentsLH.UnboundedMarginal","page":"EndowmentsLH","title":"EndowmentsLH.UnboundedMarginal","text":"Marginal with unknown distribution and no bounds.\n\n\n\n\n\n","category":"type"},{"location":"index.html#EndowmentsLH.validate_draws","page":"EndowmentsLH","title":"EndowmentsLH.validate_draws","text":"Validate draws from a given marginal distribution. Mainly bounds checking and avoiding Inf and NaN.\n\n\n\n\n\n","category":"function"},{"location":"index.html#EndowmentsLH.marginal_quantile","page":"EndowmentsLH","title":"EndowmentsLH.marginal_quantile","text":"marginal_quantile(u, pct)\n\n\nQuantiles for a marginal distribution. Inputs are percentiles in [0, 1]. Not defined for all distributions. Fallback returns nothing.\n\n\n\n\n\n","category":"function"},{"location":"index.html#EndowmentsLH.corr_matrix","page":"EndowmentsLH","title":"EndowmentsLH.corr_matrix","text":"corr_matrix(ed)\ncorr_matrix(ed, nameV)\n\n\nCompute the correlation matrix of select endowments. Defaults to all endowments in the order determined by names(ed). Note that not all endowments are scalar. Correlations are only computed for those that are. The others are set to NaN.\n\n\n\n\n\n","category":"function"},{"location":"index.html#EndowmentsLH.formatted_corr_matrix","page":"EndowmentsLH","title":"EndowmentsLH.formatted_corr_matrix","text":"formatted_corr_matrix(ed)\nformatted_corr_matrix(ed, nameV)\n\n\nCreate formatted correlation matrix for selected endowments. Returns a string matrix with headers.\n\n\n\n\n\nformatted_corr_matrix(corrM, nameV)\n\n\nCreate formatted correlation matrix from a numeric matrix and variable names. Correlation matrix may contain NaNs.\n\n\n\n\n\n","category":"function"},{"location":"index.html#Typical-Flow","page":"EndowmentsLH","title":"Typical Flow","text":"","category":"section"},{"location":"index.html","page":"EndowmentsLH","title":"EndowmentsLH","text":"A collection of EndowmentDraws is typically set up by:","category":"page"},{"location":"index.html","page":"EndowmentsLH","title":"EndowmentsLH","text":"Initializing an empty object: ed = EndowmentDraws().\nDefining one endowment at a time: endow2 = Endowment(:endow2, \"Endow2\", PercentileMarginal{Float32}()).\nDrawing the endowment (model specific).\nAdding the endowment to the object: add_draws!(ed, endow2, drawV).\nValidating the draws with validate_draws.","category":"page"},{"location":"index.html","page":"EndowmentsLH","title":"EndowmentsLH","text":"Endowment draws may be retrieved one endowment at a time using get_draws or all endowments for one individual in one go using type_endowments.","category":"page"},{"location":"index.html","page":"EndowmentsLH","title":"EndowmentsLH","text":"add_draws!\nget_draws\nget_dataframe\ntype_endowments","category":"page"},{"location":"index.html#EndowmentsLH.add_draws!","page":"EndowmentsLH","title":"EndowmentsLH.add_draws!","text":"add_draws!(e, endow, dV)\n\n\nAdd draws for one variable to existing EndowDraws.\n\n\n\n\n\n","category":"function"},{"location":"index.html#EndowmentsLH.get_draws","page":"EndowmentsLH","title":"EndowmentsLH.get_draws","text":"get_draws(e, eName)\n\n\nRetrieve draws for one endowment; for all individuals.\n\n\n\n\n\n","category":"function"},{"location":"index.html#EndowmentsLH.type_endowments","page":"EndowmentsLH","title":"EndowmentsLH.type_endowments","text":"type_endowments(e, j)\n\n\nRetrieve endowment draws for one type as a DataFrame row. One can splat this as a tuple into a function:\n\nfoo(type_endowments(e, j)...) is the same as foo(x, y)\n\n\n\n\n\n","category":"function"},{"location":"index.html","page":"EndowmentsLH","title":"EndowmentsLH","text":"","category":"page"}]
}
