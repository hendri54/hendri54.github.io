var documenterSearchIndex = {"docs":
[{"location":"index.html#ModelStatisticsLH","page":"ModelStatisticsLH","title":"ModelStatisticsLH","text":"","category":"section"},{"location":"index.html","page":"ModelStatisticsLH","title":"ModelStatisticsLH","text":"A package that offers containers for storing model generated statistics by group.","category":"page"},{"location":"index.html#VarInfo","page":"ModelStatisticsLH","title":"VarInfo","text":"","category":"section"},{"location":"index.html","page":"ModelStatisticsLH","title":"ModelStatisticsLH","text":"Contains information about a variable:","category":"page"},{"location":"index.html","page":"ModelStatisticsLH","title":"ModelStatisticsLH","text":"name\ndescription\ndata type and size\noptional additional meta info stored as key value pairs","category":"page"},{"location":"index.html","page":"ModelStatisticsLH","title":"ModelStatisticsLH","text":"Example:","category":"page"},{"location":"index.html","page":"ModelStatisticsLH","title":"ModelStatisticsLH","text":"vi = VarInfo(:x, \"This is x\", Vector{Int}; size = (3,), lb = 2);\neltype(vi) == Vector{Int};\nsize(vi) == (3,);","category":"page"},{"location":"index.html","page":"ModelStatisticsLH","title":"ModelStatisticsLH","text":"It is possible to add arbitrary user defined objects as long as they support Base.size.","category":"page"},{"location":"index.html","page":"ModelStatisticsLH","title":"ModelStatisticsLH","text":"VarInfo\nget_options\nget_options\nhas_option\nvar_name\ndescription\nbounds\ninit_values\ncheck_var","category":"page"},{"location":"index.html#ModelStatisticsLH.VarInfo","page":"ModelStatisticsLH","title":"ModelStatisticsLH.VarInfo","text":"Holds meta information about one variable. options holds predefined options and user defined options. Predefined options are:\n\nsize (required)\nlb, ub\nlbs, ubs\ndimSums\ngrandSum\n\nThese can be used to check a data matrix.\n\nExample\n\nvi = VarInfo{Vector{Int}}(:x, \"x stores a Vector of Int\"; size = (3,), lb = 0);\neltype(vi) == Int;\n\n\n\n\n\n","category":"type"},{"location":"index.html#ModelStatisticsLH.get_options","page":"ModelStatisticsLH","title":"ModelStatisticsLH.get_options","text":"get_options(vi, oNames)\n\n\nGet multiple options. nothing if not found.\n\n\n\n\n\n","category":"function"},{"location":"index.html#ModelStatisticsLH.var_name","page":"ModelStatisticsLH","title":"ModelStatisticsLH.var_name","text":"Returns name of the variable.\n\n\n\n\n\n","category":"function"},{"location":"index.html#ModelStatisticsLH.bounds","page":"ModelStatisticsLH","title":"ModelStatisticsLH.bounds","text":"Returns the bounds of the variable. These are nothing if not set.\n\n\n\n\n\n","category":"function"},{"location":"index.html#ModelStatisticsLH.check_var","page":"ModelStatisticsLH","title":"ModelStatisticsLH.check_var","text":"Check an array against the constraints implied by a ArrayInfo.\n\nArguments\n\nsilent: governs whether @warn messages are shown.\n\n\n\n\n\n","category":"function"},{"location":"index.html#ModelStats","page":"ModelStatisticsLH","title":"ModelStats","text":"","category":"section"},{"location":"index.html","page":"ModelStatisticsLH","title":"ModelStatisticsLH","text":"Holds statistics and meta information.","category":"page"},{"location":"index.html","page":"ModelStatisticsLH","title":"ModelStatisticsLH","text":"Values can be accessed and set using dot notation:","category":"page"},{"location":"index.html","page":"ModelStatisticsLH","title":"ModelStatisticsLH","text":"g.x == get_values(g, :x);\nz = g.x[1:2, 3, 4];\ng.x = [1,2,3];\ng.x[1:2, 3:5] = rand(2,3);\ng.x[1:2, 3:5] .= 0.5;","category":"page"},{"location":"index.html","page":"ModelStatisticsLH","title":"ModelStatisticsLH","text":"ModelStats\nget_meta\nhas_variable\nn_vars\nvar_names\nvar_meta\nvalidate_variable\nvalidate_stats\ndata_table\nadd_variable!\ndelete_variable!\nget_values\nset_values!","category":"page"},{"location":"index.html#ModelStatisticsLH.ModelStats","page":"ModelStatisticsLH","title":"ModelStatisticsLH.ModelStats","text":"Container that holds model statistics (arrays or scalars) and meta information.  For each variable, a VarInfo object holds info needed to display and check the data.\n\nThe T parameter is not used anywhere, but it enables the user to construct different parametric ModelStats{T} and dispatch on those. \n\n\n\n\n\n","category":"type"},{"location":"index.html#ModelStatisticsLH.get_meta","page":"ModelStatisticsLH","title":"ModelStatisticsLH.get_meta","text":"Retrieve meta info (not for a variable).\n\n\n\n\n\n","category":"function"},{"location":"index.html#ModelStatisticsLH.has_variable","page":"ModelStatisticsLH","title":"ModelStatisticsLH.has_variable","text":"Do GroupStats contain variable vName?\n\n\n\n\n\n","category":"function"},{"location":"index.html#ModelStatisticsLH.n_vars","page":"ModelStatisticsLH","title":"ModelStatisticsLH.n_vars","text":"Number of variables.\n\n\n\n\n\n","category":"function"},{"location":"index.html#ModelStatisticsLH.var_names","page":"ModelStatisticsLH","title":"ModelStatisticsLH.var_names","text":"Return all variable names.\n\n\n\n\n\n","category":"function"},{"location":"index.html#ModelStatisticsLH.var_meta","page":"ModelStatisticsLH","title":"ModelStatisticsLH.var_meta","text":"var_meta(g, vName)\n\n\nReturn meta info for a variable. Errors if not found.\n\n\n\n\n\n","category":"function"},{"location":"index.html#ModelStatisticsLH.validate_stats","page":"ModelStatisticsLH","title":"ModelStatisticsLH.validate_stats","text":"Check that \n\nall data are inside bounds\n\n\n\n\n\n","category":"function"},{"location":"index.html#ModelStatisticsLH.add_variable!","page":"ModelStatisticsLH","title":"ModelStatisticsLH.add_variable!","text":"add_variable!(g, vInfo, newValues)\n\n\nAdd a variable.\n\nArguments\n\nvInfo: Can be a VarInfo or a Tuple of values that can be fed into the VarInfo constructor.\n\nExample\n\nadd_variable!(g, (:vName, 0.0, 1.0), [1,2,3]);\n\n\n\n\n\n","category":"function"},{"location":"index.html#ModelStatisticsLH.delete_variable!","page":"ModelStatisticsLH","title":"ModelStatisticsLH.delete_variable!","text":"delete_variable!(g, vName)\n\n\nDelete a variable. Errors if it does not exist.\n\n\n\n\n\n","category":"function"},{"location":"index.html#ModelStatisticsLH.get_values","page":"ModelStatisticsLH","title":"ModelStatisticsLH.get_values","text":"Return values for a variable. Errors if not found, unless defaultValue is provided.\n\n\n\n\n\n","category":"function"},{"location":"index.html#ModelStatisticsLH.set_values!","page":"ModelStatisticsLH","title":"ModelStatisticsLH.set_values!","text":"Set values for a variable. Errors if variable does not exist. Optional: validates values against meta info.\n\nExample\n\nset_values!(g, :x, [1,2,3]);\n# This can also be called with dot notation\ng.x = [1,2,3];\n\n\n\n\n\n","category":"function"},{"location":"index.html#StatsCollection","page":"ModelStatisticsLH","title":"StatsCollection","text":"","category":"section"},{"location":"index.html","page":"ModelStatisticsLH","title":"ModelStatisticsLH","text":"Container that holds several ModelStats objects.","category":"page"},{"location":"index.html","page":"ModelStatisticsLH","title":"ModelStatisticsLH","text":"Stats can be accessed by providing \"groups\" which are the T in the ModelStats{T} objects. Or they can be accessed as if the StatsCollection were a flat collection. ","category":"page"},{"location":"index.html","page":"ModelStatisticsLH","title":"ModelStatisticsLH","text":"The user defines statname_from_name and groups_from_name to translate a variable name of the form (say) :workTime_gp into the groups (:gpa, :parental) and the variable :workTime. Then retrieving :workTime_gp is the same as retrieving the ModelStats{(:gpa, :parental)} object's :workTime variable.","category":"page"},{"location":"index.html#Example","page":"ModelStatisticsLH","title":"Example","text":"","category":"section"},{"location":"index.html","page":"ModelStatisticsLH","title":"ModelStatisticsLH","text":"sc = StatsCollection{:x}();\n# Add the statistics, by group\ngrp = (:gpa, :parental);\nms = ModelStats{grp}(...);\nadd_mstats!(sc, ms);\nms == get_mstats(sc, grp);\n# Different ways of retrieving stats\nx1 = get_stats(sc, grp, :workTime);\nx1 == get_stats(sc, :workTime_gp);\nx1 == sc.workTime_gp;\n# getindex is overloaded\nsc.workTime_gp[3] == 0.5;\n# setindex is overloaded\nsc.workTime_gp[3] = 0.5;\n# setproperty is overloaded\nsc.workTime_gp = newValues;","category":"page"},{"location":"index.html","page":"ModelStatisticsLH","title":"ModelStatisticsLH","text":"StatsCollection\nadd_mstats!\ndelete_mstats!\nreplace_mstats!\nget_groups\nhas_mstats\nget_mstats\nget_stats\nset_stats!\ngroups_from_name\nstatname_from_name","category":"page"},{"location":"index.html#ModelStatisticsLH.StatsCollection","page":"ModelStatisticsLH","title":"ModelStatisticsLH.StatsCollection","text":"Container for a collection of ModelStats. May also contain nested StatsCollections.\n\n\n\n\n\n","category":"type"},{"location":"index.html#ModelStatisticsLH.add_mstats!","page":"ModelStatisticsLH","title":"ModelStatisticsLH.add_mstats!","text":"add_mstats!(m, s)\n\n\nAdd ModelStats or a nested StatsCollection.\n\n\n\n\n\n","category":"function"},{"location":"index.html#ModelStatisticsLH.delete_mstats!","page":"ModelStatisticsLH","title":"ModelStatisticsLH.delete_mstats!","text":"delete_mstats!(m, msName)\n\n\nDelete ModelStats.\n\n\n\n\n\n","category":"function"},{"location":"index.html#ModelStatisticsLH.replace_mstats!","page":"ModelStatisticsLH","title":"ModelStatisticsLH.replace_mstats!","text":"Replace ModelStats. Add it if it does not exist.\n\n\n\n\n\n","category":"function"},{"location":"index.html#ModelStatisticsLH.get_groups","page":"ModelStatisticsLH","title":"ModelStatisticsLH.get_groups","text":"List of all the groups. That is, m contains ModelStats{grp} for each grp in get_groups(m).\n\n\n\n\n\n","category":"function"},{"location":"index.html#ModelStatisticsLH.has_mstats","page":"ModelStatisticsLH","title":"ModelStatisticsLH.has_mstats","text":"Does the ModelStats{groups} object exist?\n\n\n\n\n\n","category":"function"},{"location":"index.html#ModelStatisticsLH.get_mstats","page":"ModelStatisticsLH","title":"ModelStatisticsLH.get_mstats","text":"Retrieve the ModelStats{groups} object. Errors if groups not found.\n\n\n\n\n\n","category":"function"},{"location":"index.html#ModelStatisticsLH.get_stats","page":"ModelStatisticsLH","title":"ModelStatisticsLH.get_stats","text":"get_stats(m, groups, statName)\n\n\nRetrieve a statistic. Groups are specified.\n\n\n\n\n\nget_stats(m, sg)\n\n\nRetrieve a statistic without providing groups.\n\nExample\n\nget_stats(m, :workTime_gp) == get_stats(m, (:gpa, :parental), :workTime)\n# Equivalently\nm.workTime_gp == get_stats(m, :workTime_gp)\nm.workTime_gp[2,3] == get_stats(m, :workTime_gp)[2,3]\n\n\n\n\n\n","category":"function"},{"location":"index.html#ModelStatisticsLH.set_stats!","page":"ModelStatisticsLH","title":"ModelStatisticsLH.set_stats!","text":"set_stats!(m, groups, statName, x)\n\n\nSet values for a statistic.\n\nExample\n\nset_stats!(m, (:gpa, :parental), [1,2,3])\nset_stats!(m, :workTime_gp, [1,2,3])\n# Also with indices\nm.workTime_gp[2,3] = x\n\n\n\n\n\n","category":"function"},{"location":"index.html#ModelStatisticsLH.groups_from_name","page":"ModelStatisticsLH","title":"ModelStatisticsLH.groups_from_name","text":"groups_from_name(m, statName)\n\n\nMapping of name of a statistic into groups. User defines this for each parametric StatsCollection{T}.\n\nExample:\n\ngroups_from_name(m, :workTime_gp) == (:gpa, :parental)\n\n\n\n\n\n","category":"function"},{"location":"index.html#ModelStatisticsLH.statname_from_name","page":"ModelStatisticsLH","title":"ModelStatisticsLH.statname_from_name","text":"statname_from_name(m, statName)\n\n\nMapping of name of a statistic into its name without the group info. User defines this for each parametric StatsCollection{T}.\n\nExample:\n\ngroups_from_name(m, :workTime_gp) == :workTime\n\n\n\n\n\n","category":"function"},{"location":"index.html","page":"ModelStatisticsLH","title":"ModelStatisticsLH","text":"","category":"page"}]
}
