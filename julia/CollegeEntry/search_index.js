var documenterSearchIndex = {"docs":
[{"location":"index.html#CollegeEntry","page":"CollegeEntry","title":"CollegeEntry","text":"","category":"section"},{"location":"index.html","page":"CollegeEntry","title":"CollegeEntry","text":"CurrentModule = CollegeEntry","category":"page"},{"location":"index.html","page":"CollegeEntry","title":"CollegeEntry","text":"This package contains a generic college entry or assignment model. The general idea is to map the values of working and of attending various colleges together with student characteristics, such as test scores, into college entry probabilities.","category":"page"},{"location":"index.html","page":"CollegeEntry","title":"CollegeEntry","text":"Once the user has set up an AbstractEntryDecision and an AbstractAdmissionsRule, calling entry_decisions yields entry probabilities and expected utilities for students with given payoffs from attending each college. The results are returned as an AbstractEntryResults object.","category":"page"},{"location":"index.html","page":"CollegeEntry","title":"CollegeEntry","text":"For sequential entry mechanisms, students need to be ranked to determine the order in which they get to choose colleges. This is done using AbstractRankings.","category":"page"},{"location":"index.html","page":"CollegeEntry","title":"CollegeEntry","text":"Entry is always represented as sequential choice in the rank order of the students. Without capacity constraints, sequential choice and simultaneous choice are the same, so this representation is without loss of generality. Without capacity constraints, the rank order does not matter.","category":"page"},{"location":"index.html","page":"CollegeEntry","title":"CollegeEntry","text":"Example:","category":"page"},{"location":"index.html","page":"CollegeEntry","title":"CollegeEntry","text":"# There are `nc` colleges\nnc = 4;\n\n# Set up admission rules\n# Students are ranked by the endowment named `hsGpa`.\n# The cutoff for each college that grants admission ranges from 0.0 to 0.8.\nadmissionS = AdmissionsCutoffSwitches(nc, :hsGpa, \n        collect(range(0.0, 0.8, length = nc)), 0.05);\n\n# Set up entry decision structure\n# There are `J` types\nJ = 200;\n# and `nl` locations\nnl = 3;\n# Total college capacity as multiple of type mass is\ntotalCapacity = J * nl * 0.4;\nswitches = make_test_entry_sequ_multiloc(J, nc, nl, totalCapacity);\n# Initialize the entry decision\nentryS = init_entry_decision(ObjectId(:test), switches, st);\n\n# From model solution, get values of working and of studying\n# Provide the ranking of each student according to the indicator that determines the order in which students get to decide (rank_jV).\n# Provide the `hsGpa` of each student that is used in admissions.\n# The result `er` is an `AbstractEntryResult`\ner = entry_decisions(entryS, admissionS,\n        vWork_jV, vCollege_jcM, hsGpaPctV, rank_jV);","category":"page"},{"location":"index.html","page":"CollegeEntry","title":"CollegeEntry","text":"Notational note: Several functions have suffixes that indicate the dimensions of the objects to be returned. For example, type_mass_jl returns the mass of types by (type, location), whereas type_mass_j returns the total mass of each type across locations.","category":"page"},{"location":"index.html","page":"CollegeEntry","title":"CollegeEntry","text":"Notation (Latex symbols) are provided into object constructors as LatexLH.SymbolTable objects. make_test_symbol_table() contains all the objects that need to be defined for all variations of entry scenarios.","category":"page"},{"location":"index.html#Admission-rules","page":"CollegeEntry","title":"Admission rules","text":"","category":"section"},{"location":"index.html","page":"CollegeEntry","title":"CollegeEntry","text":"An AbstractAdmissionsRule determines the probability that a student may attend a particular college as a function of the students characteristics. Special cases are:","category":"page"},{"location":"index.html","page":"CollegeEntry","title":"CollegeEntry","text":"AdmissionsOpen: open admissions.\nAdmissionsCutoff: admissions are determined by cutoff values for a single indicator, such as test scores.","category":"page"},{"location":"index.html","page":"CollegeEntry","title":"CollegeEntry","text":"Admission rules are constructed from \"switches,\" such as AdmissionsCutoffSwitches using make_admissions.","category":"page"},{"location":"index.html","page":"CollegeEntry","title":"CollegeEntry","text":"AbstractAdmissionsRule\nAdmissionsOpen\nAdmissionsCutoff\nmake_admissions","category":"page"},{"location":"index.html#CollegeEntry.AbstractAdmissionsRule","page":"CollegeEntry","title":"CollegeEntry.AbstractAdmissionsRule","text":"Abstract type for admissions rules.\n\n\n\n\n\n","category":"type"},{"location":"index.html#CollegeEntry.AdmissionsOpen","page":"CollegeEntry","title":"CollegeEntry.AdmissionsOpen","text":"Open admissions. Any student may attend any college.\n\n\n\n\n\n","category":"type"},{"location":"index.html#CollegeEntry.AdmissionsCutoff","page":"CollegeEntry","title":"CollegeEntry.AdmissionsCutoff","text":"Admissions are governed by a single indicator, such as a test score. Students can attend colleges for which they qualify in the sense that their indicator exceeds the college's cutoff value. Students may be allowed to attend other colleges with a fixed probability.\n\n\n\n\n\n","category":"type"},{"location":"index.html#CollegeEntry.make_admissions","page":"CollegeEntry","title":"CollegeEntry.make_admissions","text":"make_admissions(switches)\n\n\nInitialize an admission rule from its switches. \n\n\n\n\n\n","category":"function"},{"location":"index.html#Entry-decisions","page":"CollegeEntry","title":"Entry decisions","text":"","category":"section"},{"location":"index.html","page":"CollegeEntry","title":"CollegeEntry","text":"An AbstractEntryDecision provides a structure according to which students make entry decisions, given a set of available colleges. The only concrete type right now is EntryDecision, which can be set up for one location or for multiple with and without capacity constraints.","category":"page"},{"location":"index.html","page":"CollegeEntry","title":"CollegeEntry","text":"The idea is to implement an assignment mechanism similar to Hendricks, Herrington, and Schoellman (2021 AEJM). The ingredients are:","category":"page"},{"location":"index.html","page":"CollegeEntry","title":"CollegeEntry","text":"There is a set of colleges with fixed qualities and capacities.\nA student ranking that determines the order in which students choose colleges. This is provided simply as an ordinal student ranking from outside of the package.\nAn AbstractAdmissionsRule that determines whether a given student can attend a given college, assuming the college is not full. This could be probabilistic.","category":"page"},{"location":"index.html","page":"CollegeEntry","title":"CollegeEntry","text":"The algorithm then proceeds as follows:","category":"page"},{"location":"index.html","page":"CollegeEntry","title":"CollegeEntry","text":"Start with all colleges empty.\nLoop over students in order of their ranking.\nFor each student, determine the set of colleges that admit the student (according to the AbstractAdmissionsRule) and that are not full.\nCalculate the probability that each student attends each available college.\nRecord the increment in each college's enrollment. For the next student, colleges that are full are no longer available.\nContinue to the next student in the ranking.","category":"page"},{"location":"index.html","page":"CollegeEntry","title":"CollegeEntry","text":"Useful generic methods are listed below.","category":"page"},{"location":"index.html","page":"CollegeEntry","title":"CollegeEntry","text":"AbstractEntryDecision\nEntryDecision\ninit_entry_decision\nentry_decisions\nentry_probs\nscale_entry_probs!\nset_local_only_colleges!\nincrease_capacities!\nincrease_capacity!","category":"page"},{"location":"index.html#CollegeEntry.AbstractEntryDecision","page":"CollegeEntry","title":"CollegeEntry.AbstractEntryDecision","text":"Abstract type for entry decision protocols.\n\n\n\n\n\n","category":"type"},{"location":"index.html#CollegeEntry.EntryDecision","page":"CollegeEntry","title":"CollegeEntry.EntryDecision","text":"Sequential entry protocol.\n\n\n\n\n\n","category":"type"},{"location":"index.html#CollegeEntry.init_entry_decision","page":"CollegeEntry","title":"CollegeEntry.init_entry_decision","text":"`init_entry_decision(objId :: ObjectId, switches :: AbstractEntrySwitches)`\n\nInitializes an AbstractEntryDecision from its switches.\n\n\n\n\n\n","category":"function"},{"location":"index.html#CollegeEntry.entry_decisions","page":"CollegeEntry","title":"CollegeEntry.entry_decisions","text":"entry_decisions(entryS, admissionS, vWork_jV, vCollege_jcM, endowPctV, rank_jV; prefShocks)\n\n\nCompute entry probabilities and expected values at entry from admission rule and entry decision objects.\n\nIt is possible to solve for a subset of types. Only those listed in rank_jV will be solved. But keep in mind that capacity constraints may then not bind.\n\nThe type dimension of the EntryResults object matches that of the EntryDecision.\n\nOptional: solve each student's entry decision without preference shocks, but continue to update enrollments with preference shocks. This is useful to diagnose how important preference shocks are.\n\nNote that multiple locations only matter if they are not identical. If all colleges are available in all locations (and not full), the fraction going local (conditional on entry) is only a function of the number of locations and the value of going local. vCollege_jcM and vWork_jV do not matter. This is easy to check analytically.\n\n\n\n\n\n","category":"function"},{"location":"index.html#CollegeEntry.entry_probs","page":"CollegeEntry","title":"CollegeEntry.entry_probs","text":"entry_probs(e, vWork_jV, vCollege_jcM, admitV; prefShocks)\n\n\nEntry probability for a student who is admitted to colleges in admitV. Returns: Entry prob by [type, college], expected value at decision stage by type. This function does not handle the sequential nature of admissions. It is mainly here for unified interface. It defaults to the one step entry protocol. If that does not apply for a protocol, need to define a new method (e.g. two step entry).\n\n\n\n\n\n","category":"function"},{"location":"index.html#CollegeEntry.scale_entry_probs!","page":"CollegeEntry","title":"CollegeEntry.scale_entry_probs!","text":"scale_entry_probs!(entryProb_jlcM, minEntryProb, maxEntryProb)\n\n\nScale entry probabilities by (j,l) -> c to bound away from 0. Bound entry probs by (j,l) away from 1. Does not guarantee particular min values (that is hard to do).\n\n\n\n\n\nScale entry probs to bound within min_entry_prob and max_entry_prob.\n\n\n\n\n\n","category":"function"},{"location":"index.html#CollegeEntry.set_local_only_colleges!","page":"CollegeEntry","title":"CollegeEntry.set_local_only_colleges!","text":"set_local_only_colleges!(switches, icV)\n\n\nMark which colleges can be attended by locals only.\n\n\n\n\n\n","category":"function"},{"location":"index.html#CollegeEntry.increase_capacities!","page":"CollegeEntry","title":"CollegeEntry.increase_capacities!","text":"increase_capacities!(switches, cFactor)\n\n\nIncrease all college capacities by a common factor.\n\n\n\n\n\n","category":"function"},{"location":"index.html#CollegeEntry.increase_capacity!","page":"CollegeEntry","title":"CollegeEntry.increase_capacity!","text":"increase_capacity!(switches, cFactor, cIdx)\n\n\nIncrease one college capacities by a factor.\n\n\n\n\n\n","category":"function"},{"location":"index.html#Extension:-Diversity-preferences.","page":"CollegeEntry","title":"Extension: Diversity preferences.","text":"","category":"section"},{"location":"index.html","page":"CollegeEntry","title":"CollegeEntry","text":"Colleges' preferences for diversity may be modeled by imposing quotas on students with certain characteristics. For example, high quality colleges may only admit a certain fraction of students in each income quartile. Once the quota is filled, such colleges are removed from the admissions set for students in those quartiles.","category":"page"},{"location":"index.html#Student-Rankings","page":"CollegeEntry","title":"Student Rankings","text":"","category":"section"},{"location":"index.html","page":"CollegeEntry","title":"CollegeEntry","text":"For sequential admissions protocols, students need to be ranked. All colleges agree on the ranking which determines the order in which students get to choose colleges.","category":"page"},{"location":"index.html","page":"CollegeEntry","title":"CollegeEntry","text":"Steps:","category":"page"},{"location":"index.html","page":"CollegeEntry","title":"CollegeEntry","text":"Define an object that holds endowment draws.\nExtend retrieve_draws and n_draws for this object. \nSet up switches that govern the ranking, such as EndowPctRankingSwitches.\nCall make_student_ranking to initialize an AbstractRanking.\nCall entry_decisions to compute entry probabilities by type and college and expected values at college entry. This accepts the endowment draws object as input and call retrieve_draws to retrieve named endowments.","category":"page"},{"location":"index.html","page":"CollegeEntry","title":"CollegeEntry","text":"If student rankings and admissions are supposed to operate on the same object, that object needs to be a single endowment. For example, students can be admitted based on expected abiity given GPA and parental. This is constructed as an endowment draw.","category":"page"},{"location":"index.html","page":"CollegeEntry","title":"CollegeEntry","text":"AbstractRanking\nAbstractRankingSwitches\nEndowPctRanking\nEndowPctRankingSwitches\nretrieve_draws\nn_draws\nmake_student_ranking","category":"page"},{"location":"index.html#CollegeEntry.AbstractRanking","page":"CollegeEntry","title":"CollegeEntry.AbstractRanking","text":"Abstract student ranking type.\n\n\n\n\n\n","category":"type"},{"location":"index.html#CollegeEntry.AbstractRankingSwitches","page":"CollegeEntry","title":"CollegeEntry.AbstractRankingSwitches","text":"Abstract type for switches governing student ranking.\n\n\n\n\n\n","category":"type"},{"location":"index.html#CollegeEntry.EndowPctRanking","page":"CollegeEntry","title":"CollegeEntry.EndowPctRanking","text":"Rank students by a linear combination of endowment percentiles.\n\n\n\n\n\n","category":"type"},{"location":"index.html#CollegeEntry.EndowPctRankingSwitches","page":"CollegeEntry","title":"CollegeEntry.EndowPctRankingSwitches","text":"Switches for linear endowment percentile weights.  eNameV contains the endowments used for ranking. It must be possible to call retrieve_draws(EndowmentDraws, eName). wtV are the weights to be used if not calibrated. This omits the first weight, which is fixed at 1. This is empty when there is only one endowment to rank on. Weights are bounded in the interval lbV to ubV. Weights may be negative. doCal determines whether weights are calibrated or fixed.\n\n\n\n\n\n","category":"type"},{"location":"index.html#CollegeEntry.retrieve_draws","page":"CollegeEntry","title":"CollegeEntry.retrieve_draws","text":"retrieve_draws(draws, eName)\n\n\nRetrieve draws for endowment eName. Needs to be defined for objects passed into ranking functions.\n\n\n\n\n\n","category":"function"},{"location":"index.html#CollegeEntry.n_draws","page":"CollegeEntry","title":"CollegeEntry.n_draws","text":"n_draws(draws)\n\n\nNumber of individuals in endowment draws. Needs to be defined for objects passed into ranking functions.\n\n\n\n\n\n","category":"function"},{"location":"index.html#CollegeEntry.make_student_ranking","page":"CollegeEntry","title":"CollegeEntry.make_student_ranking","text":"Initialize an AbstractRanking object from its switches.\n\n\n\n\n\n","category":"function"},{"location":"index.html#Results","page":"CollegeEntry","title":"Results","text":"","category":"section"},{"location":"index.html","page":"CollegeEntry","title":"CollegeEntry","text":"entry_decisions returns an AbstractEntryResults object. This can be queried using a unified interface, even though different entry protocols produce information in different ways. For example, only some protocols have locations.","category":"page"},{"location":"index.html","page":"CollegeEntry","title":"CollegeEntry","text":"AbstractEntryResults\nEntryResults\nn_locations\nn_colleges\nn_types\ncapacities\nenrollment_cl\nenrollment_c\nentry_probs_jlc\nentry_probs_jc\nentry_probs_j\nexpected_values_jl\nfrac_local\nfrac_local_j\nfrac_local_c","category":"page"},{"location":"index.html#CollegeEntry.AbstractEntryResults","page":"CollegeEntry","title":"CollegeEntry.AbstractEntryResults","text":"Abstract type for results from entry decisions.\n\n\n\n\n\n","category":"type"},{"location":"index.html#CollegeEntry.EntryResults","page":"CollegeEntry","title":"CollegeEntry.EntryResults","text":"Entry results for multiple locations. Records:\n\nfracEnter_jlcM: Fraction of students in (j,l) who attend college c\nfracLocal_jlcM: The same, but for the local college c (if any).\nfracEnterBest_jlcM: Fraction of students in (j,l) who attend college c and for who this is the best available college.\nenroll_clM: total enrollment at college (c, l).\nenrollLocal_clM: local enrollment at college (c, l).\nenrollBest_clM: enrollment of students for who this is the best available college.\neVal_jlM: expected value of students in (j,l) at the start of the process.\n\n\n\n\n\n","category":"type"},{"location":"index.html#CollegeEntry.n_locations","page":"CollegeEntry","title":"CollegeEntry.n_locations","text":"n_locations(e)\n\n\nNumber of locations.\n\n\n\n\n\n","category":"function"},{"location":"index.html#CollegeEntry.n_colleges","page":"CollegeEntry","title":"CollegeEntry.n_colleges","text":"n_colleges(e)\n\n\nNumber of colleges.\n\n\n\n\n\n","category":"function"},{"location":"index.html#CollegeEntry.n_types","page":"CollegeEntry","title":"CollegeEntry.n_types","text":"n_types(e)\n\n\nNumber of student types.\n\n\n\n\n\n","category":"function"},{"location":"index.html#CollegeEntry.capacities","page":"CollegeEntry","title":"CollegeEntry.capacities","text":"College capacities. Set to an arbitrary large number for entry mechanisms where capacities do not matter.\n\n\n\n\n\n","category":"function"},{"location":"index.html#CollegeEntry.enrollment_cl","page":"CollegeEntry","title":"CollegeEntry.enrollment_cl","text":"College enrollments. By location (if any).\n\n\n\n\n\n","category":"function"},{"location":"index.html#CollegeEntry.enrollment_c","page":"CollegeEntry","title":"CollegeEntry.enrollment_c","text":"enrollment_c(e)\nenrollment_c(e, univ)\n\n\nTotal enrollment by college; across all locations.\n\n\n\n\n\n","category":"function"},{"location":"index.html#CollegeEntry.entry_probs_jlc","page":"CollegeEntry","title":"CollegeEntry.entry_probs_jlc","text":"Entry probabilities by college for each type, location.\n\n\n\n\n\n","category":"function"},{"location":"index.html#CollegeEntry.entry_probs_jc","page":"CollegeEntry","title":"CollegeEntry.entry_probs_jc","text":"entry_probs_jc(e)\nentry_probs_jc(e, univ)\n\n\nFraction of each type entering each college; across all locations.\n\n\n\n\n\n","category":"function"},{"location":"index.html#CollegeEntry.entry_probs_j","page":"CollegeEntry","title":"CollegeEntry.entry_probs_j","text":"Entry probabilities by type, across all colleges.\n\n\n\n\n\n","category":"function"},{"location":"index.html#CollegeEntry.expected_values_jl","page":"CollegeEntry","title":"CollegeEntry.expected_values_jl","text":"Expected value at college entry stage, by type.\n\n\n\n\n\n","category":"function"},{"location":"index.html#CollegeEntry.frac_local","page":"CollegeEntry","title":"CollegeEntry.frac_local","text":"Fraction of students who attend local colleges.\n\n\n\n\n\n","category":"function"},{"location":"index.html#CollegeEntry.frac_local_j","page":"CollegeEntry","title":"CollegeEntry.frac_local_j","text":"Fraction of students of each type who attend local colleges.\n\n\n\n\n\n","category":"function"},{"location":"index.html#CollegeEntry.frac_local_c","page":"CollegeEntry","title":"CollegeEntry.frac_local_c","text":"Fraction of students at each college who are local. Across all locations.\n\n\n\n\n\n","category":"function"},{"location":"index.html","page":"CollegeEntry","title":"CollegeEntry","text":"","category":"page"}]
}
