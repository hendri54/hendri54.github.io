{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"econ890/julia/getting_started.html","text":"Installing Julia \u00b6 I recommend running Julia from a terminal window with Visual Studio Code as editor. Installation hints Info on VS Code You also need the Julia VS Code extension. See also VSCode: the future for Julia development - TechyTok You may have another favorite text editor, but you will lose integration with the Julia language. Useful guides to getting started: QuantEcon The Julia documentation is really very good. It should be your go-to place for getting started. I find it useful to install a documentation browser (on MacOS that would be Dash ). It is faster to interact with the docs this way. Installation details \u00b6 Download the binary for your platform. Follow the instructions in the \"help\" link for your platform. You should add a path to the Julia binary in the terminal. Try that you can start Julia by typing julia from a terminal window. You should see the REPL . Type using Pkg . Type Pkg.add(\"OhMyREPL\") . You will see some registry updating messages. These can take time. Type Pkg.add(\"Revise\") . This adds the essential package Revise.jl . It massively improves the Julia workflow. Exit Julia by typing exit() . You are back at the terminal prompt. Edit \"~/.julia/config/startup.jl\" and add the line using OhMyREPL, Revise . This ensures that those packages are used every time you start Julia. Start Julia again and type Revise . This should not give an error message, indicating the Revise was installed successfully. Interacting with Julia \u00b6 At the terminal, type julia to start a Julia session. You will see the REPL, which is similar to Matlab's command line. At the REPL, you can type any Julia command and see the results displayed. Note the REPL inputs (and all Julia commands) are case sensitive. ? switches to REPL help mode. For example, ?abs will give help on the abs function: ?abs abs(x) The absolute value of `x`. When `abs` is applied to signed integers, overflow may occur, resulting in the return of a negative value. This overflow occurs only when `abs` is applied to the minimum representable value of a signed integer. That is, when `x == typemin(typeof(x))`, `abs(x) == x < 0`, not `-x` as might be expected. # Examples ```jldoctest julia> abs(-3) 3 julia> abs(1 + im) 1.4142135623730951 julia> abs(typemin(Int64)) -9223372036854775808 After Installation \u00b6 Once Julia is installed and running, it is useful to install a few helper packages. In the REPL, type using Pkg; Pkg.add(\"OhMyREPL\"); Pkg.add(\"Revise\"); This will take some time to execute. You should also: create a symlink (linux or macos) to the julia binary set the path to the Julia binary in the VS Code extension After making changes to installed packages, you should always restart the REPL. Ctrl-D quits the REPL.","title":"Installing Julia"},{"location":"econ890/julia/getting_started.html#installing-julia","text":"I recommend running Julia from a terminal window with Visual Studio Code as editor. Installation hints Info on VS Code You also need the Julia VS Code extension. See also VSCode: the future for Julia development - TechyTok You may have another favorite text editor, but you will lose integration with the Julia language. Useful guides to getting started: QuantEcon The Julia documentation is really very good. It should be your go-to place for getting started. I find it useful to install a documentation browser (on MacOS that would be Dash ). It is faster to interact with the docs this way.","title":"Installing Julia"},{"location":"econ890/julia/getting_started.html#installation-details","text":"Download the binary for your platform. Follow the instructions in the \"help\" link for your platform. You should add a path to the Julia binary in the terminal. Try that you can start Julia by typing julia from a terminal window. You should see the REPL . Type using Pkg . Type Pkg.add(\"OhMyREPL\") . You will see some registry updating messages. These can take time. Type Pkg.add(\"Revise\") . This adds the essential package Revise.jl . It massively improves the Julia workflow. Exit Julia by typing exit() . You are back at the terminal prompt. Edit \"~/.julia/config/startup.jl\" and add the line using OhMyREPL, Revise . This ensures that those packages are used every time you start Julia. Start Julia again and type Revise . This should not give an error message, indicating the Revise was installed successfully.","title":"Installation details"},{"location":"econ890/julia/getting_started.html#interacting-with-julia","text":"At the terminal, type julia to start a Julia session. You will see the REPL, which is similar to Matlab's command line. At the REPL, you can type any Julia command and see the results displayed. Note the REPL inputs (and all Julia commands) are case sensitive. ? switches to REPL help mode. For example, ?abs will give help on the abs function: ?abs abs(x) The absolute value of `x`. When `abs` is applied to signed integers, overflow may occur, resulting in the return of a negative value. This overflow occurs only when `abs` is applied to the minimum representable value of a signed integer. That is, when `x == typemin(typeof(x))`, `abs(x) == x < 0`, not `-x` as might be expected. # Examples ```jldoctest julia> abs(-3) 3 julia> abs(1 + im) 1.4142135623730951 julia> abs(typemin(Int64)) -9223372036854775808","title":"Interacting with Julia"},{"location":"econ890/julia/getting_started.html#after-installation","text":"Once Julia is installed and running, it is useful to install a few helper packages. In the REPL, type using Pkg; Pkg.add(\"OhMyREPL\"); Pkg.add(\"Revise\"); This will take some time to execute. You should also: create a symlink (linux or macos) to the julia binary set the path to the Julia binary in the VS Code extension After making changes to installed packages, you should always restart the REPL. Ctrl-D quits the REPL.","title":"After Installation"}]}